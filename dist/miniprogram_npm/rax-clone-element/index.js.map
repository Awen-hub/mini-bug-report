{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nexports.__esModule = true;\nexports.default = cloneElement;\n\nvar _rax = require(\"rax\");\n\nvar _raxIsValidElement = _interopRequireDefault(require(\"rax-is-valid-element\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Host = _rax.shared.Host,\n    Element = _rax.shared.Element,\n    flattenChildren = _rax.shared.flattenChildren;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true\n};\n\nfunction cloneElement(element, config) {\n  if (!(0, _raxIsValidElement.default)(element)) {\n    throw Error('cloneElement: not a valid element.');\n  } // Original props are copied\n\n\n  var props = Object.assign({}, element.props); // Reserved names are extracted\n\n  var key = element.key;\n  var ref = element.ref; // Owner will be preserved, unless ref is overridden\n\n  var owner = element._owner;\n\n  if (config) {\n    // Should reset ref and owner if has a new ref\n    if (config.ref !== undefined) {\n      ref = config.ref;\n      owner = Host.owner;\n    }\n\n    if (config.key !== undefined) {\n      key = String(config.key);\n    } // Resolve default props\n\n\n    var defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    } // Remaining properties override existing props\n\n\n    var propName;\n\n    for (propName in config) {\n      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  }\n\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n\n  if (children.length) {\n    props.children = flattenChildren(children);\n  }\n\n  return new Element(element.type, key, ref, props, owner);\n}\n\n;"]}