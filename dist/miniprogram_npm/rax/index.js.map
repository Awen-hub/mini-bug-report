{"version":3,"sources":["index.js","dist/rax.min.js","dist/rax.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/rax.min.js');\n} else {\n  module.exports = require('./dist/rax.js');\n}\n","var n={t:1,i:!1,driver:null,rootComponents:{},rootInstances:{},owner:null};function t(n,t,i,r,u){return{type:n,key:t,ref:i,props:r,_owner:u}}function i(n){return null===n}function r(n){return\"function\"==typeof n}function u(n){return\"object\"==typeof n}function f(n){return\"[object Object]\"===h.toString.call(n)}function o(n){return Array.isArray(n)}function e(n){return\"string\"==typeof n}function s(n){return\"number\"==typeof n}var c=function(){},h={};function a(n,t){if(o(n))for(var i=0,r=n.length;i<r;i++)a(n[i],t);else t.push(n)}function v(n){if(null==n)return n;var t=[];return a(n,t),t.length-1?t:t[0]}var l=[],p=[],d=[],_=setTimeout;function x(n){var t;while(t=n.shift())t()}function w(n){0===l.length&&_(y),l.push(n)}function y(){x(l)}function b(n){0===p.length&&_(j),p.push(n)}function j(){x(p)}function m(n){d.push(n)}function O(t,i,r){var u,o=void 0===r?\"\":\" got: \"+function(n){return f(n)?Object.keys(n):n}(r);return Error(t+\": #\"+i+\", \"+(((u=n.owner)?\"check <\"+u.u()+\">\":\"no owner\")+\".\")+o)}function g(n,t){throw O(\"Error\",n,t)}function k(n,t){var i=O(\"Warn\",n,t);_((function(){throw i}),0)}var I={key:!0,ref:!0};function A(i,r,u){var f,e={},s=null,h=null;if(null!=r)for(f in h=void 0===r.ref?null:r.ref,s=void 0===r.key?null:\"\"+r.key,r)I[f]||(e[f]=r[f]);var a=arguments.length-2;if(a>0)if(1!==a||o(u)){var l=u;if(a>1){l=Array(a);for(var p=0;p<a;p++)l[p]=arguments[p+2]}e.children=v(l)}else e.children=u;if(i&&i.defaultProps){var d=i.defaultProps;for(f in d)void 0===e[f]&&(e[f]=d[f])}return null==i&&(i=c,k(0)),new t(i,s,h,e,n.owner)}function C(n,t,i){for(var r=0,u=n&&n.length;r<u;r++)n[r].call(t,i)}var E=h.hasOwnProperty;function P(n,t){return n===t?0!==n||1/n==1/t:n!=n&&t!=t}function D(n,t){if(P(n,t))return!0;if(!u(n)||i(n)||!u(t)||i(t))return!1;var r=Object.keys(n);if(r.length!==Object.keys(t).length)return!1;for(var f=0;f<r.length;f++)if(!E.call(t,r[f])||!P(n[r[f]],t[r[f]]))return!1;return!0}function S(){return n.owner&&n.owner._instance}function U(){var n=S();if(n)return n;g(1)}function H(n,t){if(i(t)||n.length!==t.length)return!1;for(var r=0;r<n.length;r++)if(!P(n[r],t[r]))return!1;return!0}function N(t){var i=U(),u=i.getHookID(),f=i.getHooks();if(!f[u]){r(t)&&(t=t());f[u]=[t,function(t){n.i||j();var o=f[u],e=o[2];r(t)&&(t=t(e)),P(t,e)||(o[2]=t,S()===i?i.o=!0:i.h())},t]}var o=f[u];return P(o[0],o[2])||(o[0]=o[2],i.v=!0),o}function R(n,t){T(n,t)}function T(n,t,i){var r=U(),u=r.getHookID(),f=r.getHooks();if(t=void 0===t?null:t,f[u]){var o=f[u],e=o.l,s=o.p;o.p=t,o._=s,e.current=n}else{var c=function n(t){if(!t&&i)return b((function(){return n(!0)}));var r=n.current;r&&(h.current=r(),n.current=null)},h=function n(t){if(!t&&i)return b((function(){return n(!0)}));var r=n.current;r&&(r(),n.current=null)};c.current=n,f[u]={l:c,j:h,_:t,p:t},r.didMount.push(c),r.willUnmount.push((function(){return h(!0)})),r.didUpdate.push((function(){var n=f[u],t=n.p,i=n.l;null!=t&&H(t,n._)||(h(),i())}))}}function V(n,t){var r=U(),u=r.getHookID(),f=r.getHooks();if(t=void 0===t?null:t,f[u]){var o=f[u][1];!i(t)&&H(t,o)||(f[u]=[n(),t])}else f[u]=[n(),t];return f[u][0]}function W(n){return o(n)?n:[n]}function Z(n,t){var i;while(n&&n._internal){if(t(n)){i=n;break}n=n._internal.m}return i}var $=0;function q(n,t){n.prototype=Object.create(t.prototype),n.prototype.constructor=n,z(n,t)}function z(n,t){return(z=Object.setPrototypeOf||function(n,t){return n.__proto__=t,n})(n,t)}var B=function(){function t(n){this.O=n}var i=t.prototype;return i.g=function(t,i,r){this._parent=t,this.m=i,this._context=r,this._mountID=n.t++},i.k=function(){this.O=this._nativeNode=this._parent=this.m=this._context=null,this._instance&&(this._instance=this._instance._internal=null)},i.I=function(n,t,i,r){this.g(n,t,i),this.A(r);var u={};return u._internal=this,u},i.unmountComponent=function(t){this._nativeNode&&!t&&n.driver.removeChild(this._nativeNode,this._parent),this.k()},i.u=function(){var n=this.O,t=n&&n.type;return t&&t.displayName||t&&t.name||t||n},i.A=function(t){var i=this.C(),r=this._parent;t?t(i,r):n.driver.appendChild(i,r)},i.C=function(){return null==this._nativeNode?this._nativeNode=this.P():this._nativeNode},i.D=function(){return this.C()},t}(),F=function(t){function i(){return t.apply(this,arguments)||this}q(i,t);var r=i.prototype;return r.P=function(){return n.driver.createEmpty(this)},r.S=function(){},i}(B);function G(n,t,i){var r=n?n.ref:null,u=t?t.ref:null;r!==u&&(r&&K(n._owner,r,i),u&&J(t._owner,u,i))}function J(n,t,i){if(n){var f=i.D();r(t)?t(f):u(t)?t.current=f:n._instance.refs[t]=f}else k(3)}function K(n,t,i){if(r(t))t(null);else{var f=i.D();u(t)&&t.current===f?t.current=null:n._instance.refs[t]===f&&delete n._instance.refs[t]}}function L(t){var r;return f(t)&&null!==t&&t.type?r=e(t.type)?new n.U(t):new n.H(t):e(t)||s(t)?r=new n.N(t+\"\"):o(t)?r=new n.R(t):(void 0===t||i(t)||!1===t||!0===t||k(2,t),r=new n.T(t)),r}function M(n,t){var r=i(n),f=i(t);return r||f?r===f:!(!o(n)||!o(t))||(e(n)||s(n)?e(t)||s(t):u(n)&&u(t)&&n.type===t.type&&n.key===t.key)}function Q(n,t,i){var r=t&&t.key,u=\".\"+i.toString(36);if(e(r)){var f=\"$\"+r;return void 0===n[f]?f:u}return u}function X(t){var i=t;while(i=t.m&&t.m._internal)if(i instanceof n.H)t=i;else{for(var r=Object.keys(i.V),u=t.W-1;u>=0;u--){var f=i.V[r[u]].C();if(!o(f))return f;if(f.length>0)return f[f.length-1]}if(!(i instanceof n.R))return null;t=i}}var Y=function(){function n(n,t){this.props=n,this.context=t,this.refs={}}var t=n.prototype;return t.setState=function(n,t){this.updater.setState(this,n,t)},t.forceUpdate=function(n){this.updater.forceUpdate(this,n)},n}(),nn=function(n){function t(t,i){var r;return(r=n.call(this,t,i)||this).Z=!0,r}return q(t,n),t}(Y),tn=1,rn=function(n){function t(){var t;return(t=n.call(this)||this).$=[],t.q=tn++,t}q(t,n);var i=t.prototype;return i.D=function(){return this.B().D()},i.B=function(){return this._internal._renderedComponent},i.h=function(n){this.$=n,this.forceUpdate()},i.render=function(){return this.$},t}(Y),un={set:function(t,i){t._r||(t._r=i,i.q&&(n.rootInstances[i.q]=i,n.rootComponents[i.q]=i._internal))},get:function(n){return n._r},remove:function(t){var i=this.get(t);i&&(t._r=null,i.q&&(delete n.rootComponents[i.q],delete n.rootInstances[i.q]))},mount:function(t,i,r){var u=r.parent,f=r.hydrate,o=n.driver;null==i&&(i=o.createBody());var e,s={element:t,container:i,hydrate:f};if(o.beforeRender&&o.beforeRender(s),u){var c=u._internal;e=c.F(c._context)}var h=this.get(i);if(h&&h.q)return e&&(h._internal.G=e),h.h(t),o.afterRender&&o.afterRender(s),h;var a=L(A(rn)).I(i,u,e||{});return this.set(i,a),a.h(t),o.afterRender&&o.afterRender(s),a}},fn=Object.assign,on=/^on[A-Z]/,en=function(t){function u(){return t.apply(this,arguments)||this}q(u,t);var f=u.prototype;return f.I=function(n,t,i,r){this.g(n,t,i);var u=this.O,f=u.props,o=u.type,e=f.children,s=f.append||\"tree\";this.J=fn({},f.style);var c={type:o,props:f};return c._internal=this,this._instance=c,\"tree\"===s?(this.K(e,i),this.A(r)):(this.A(r),this.K(e,i)),u&&u.ref&&J(u._owner,u.ref,this),c},f.K=function(n,t){if(null==n)return n;var i=this.C();return this.L(i,W(n),t)},f.L=function(n,t,i,r){for(var u=this.V={},f=[],o=0,e=t.length;o<e;o++){var s=t[o],c=L(s);u[Q(u,s,o)]=c,c.W=o;var h=c.I(n,this._instance,i,r);f.push(h)}return f},f.M=function(n){var t=this.V;if(t){for(var i in t){t[i].unmountComponent(n)}this.V=null}},f.unmountComponent=function(t){if(this._nativeNode){var i=this.O.ref;i&&K(this.O._owner,i,this),un.remove(this._nativeNode),t||n.driver.removeChild(this._nativeNode,this._parent)}this.M(!0),this.J=null,this.k()},f.S=function(n,t,i,r){this.O=t,G(n,t,this);var u=n.props,f=t.props;this.X(u,f),null==u.children||o(u.children)&&0===u.children.length?this.K(f.children,r):this.Y(f.children,r)},f.X=function(t,i){var u,f,o,e=n.driver,s=this.C();for(u in t)if(\"children\"!==u&&null!=t[u]&&!i.hasOwnProperty(u))if(\"style\"===u){var c=this.J;for(f in c)(o=o||{})[f]=\"\";this.J=null}else if(on.test(u)){var h=t[u];r(h)&&e.removeEventListener(s,u.slice(2).toLowerCase(),h)}else e.removeAttribute(s,u,t[u]);for(u in i){var a=i[u],v=\"style\"===u?this.J:null!=t?t[u]:void 0;if(\"children\"!==u&&v!==a&&(null!=a||null!=v))if(\"style\"===u)if(a?a=this.J=fn({},a):this.J=null,null!=v){for(f in v)a&&(a[f]||0===a[f])||((o=o||{})[f]=\"\");for(f in a)v[f]!==a[f]&&((o=o||{})[f]=a[f])}else o=a;else if(on.test(u)){var l=u.slice(2).toLowerCase();r(v)&&e.removeEventListener(s,l,v,i),r(a)&&e.addEventListener(s,l,a,i)}else null!=a?e.setAttribute(s,u,a):e.removeAttribute(s,u,t[u])}o&&e.setStyle(s,o)},f.Y=function(t,r){var u=this.V,f=n.driver;if(null!=t||null!=u){var e={};if(null!=t)for(var s=0,c=(t=W(t)).length;s<c;s++){var h=t[s],a=Q(e,h,s),v=u&&u[a],l=v&&v.O,p=v&&v._context;null!=v&&M(l,h)?(l===h&&p===r||v.S(l,h,r,r),e[a]=v):(v&&(v.nn=!0),e[a]=L(h))}var d=this.C(),_=o(d),x=null,w=null,y=!1,b=!1,j=null,m=!(!f.removeChildren||!(i(t)||t&&!t.length)||_);if(null!=u){for(var O in u){var g=u[O],k=g.nn||!e[O];x?k&&g.unmountComponent(m):(b=k,o(w=(x=g).C())&&(y=0===w.length,w=w[0]))}(_&&0===d.length||y)&&(j=X(this))}if(null!=e){var I=function(n,t){for(var i=0,r=(n=W(n)).length;i<r;i++)j?f.insertAfter(n[r-1-i],j):w?f.insertBefore(n[i],w):t&&f.appendChild(n[i],t)},A=0;for(var C in e){var E=e[C],P=u&&u[C];if(P===E){var D=P.C();P.W!==A&&I(D)}else _&&(d=this._parent),E.I(d,this._instance,r,I);E.W=A++,o(j=E.C())&&(j=j[j.length-1])}}b&&x.unmountComponent(m),m&&f.removeChildren(this._nativeNode),this.V=e}},f.P=function(){var t=this._instance,i=n.driver.createElement(t.type,t.props,this);return un.set(i,t),i},u}(B),sn=function(t){function i(){return t.apply(this,arguments)||this}q(i,t);var r=i.prototype;return r.S=function(t,i){t!==(i=\"\"+i)&&(this.O=i,n.driver.updateText(this.C(),i))},r.P=function(){return n.driver.createText(this.O,this)},i}(B),cn=function(n){function t(t,i){var r;(r=n.call(this)||this).tn=!0,r.rn=t,r.un=0,r.fn=0,r.on={},r.o=!1,r.v=!1,r.en=null,r.sn={},r.didMount=[],r.didUpdate=[],r.willUnmount=[],r.state=h,t._forwardRef&&(r.cn=r._forwardRef=i);var u=t.hn;return u&&(r.shouldComponentUpdate=function(n){for(var t=!0,i=u.length-1;i>-1;i--)if(t=u[i](r.props,n))break;return!t||r.cn!==r._forwardRef}),r}q(t,n);var i=t.prototype;return i.getHooks=function(){return this.on},i.getHookID=function(){return++this.un},i.useContext=function(n){var t=this,i=n._contextID,r=this.sn[i];if(!r){var u=n.an(this);if(r=this.sn[i]={vn:u},u){var f=function(n){r.ln!==n&&(t.v=!0,t.h())};u.pn(f),this.willUnmount.push((function(){return u.dn(f)}))}}return r.ln=r.vn?r.vn.getValue():n._defaultValue},i.componentWillMount=function(){this.v=!0},i.componentDidMount=function(){C(this.didMount)},i.componentWillReceiveProps=function(){this.v=!0},i.componentDidUpdate=function(){C(this.didUpdate)},i.componentWillUnmount=function(){C(this.willUnmount)},i.h=function(){this.setState(h)},i.render=function(){this.un=0,this.fn=0,this.o=!1;var n=this.rn(this.props,this._forwardRef?this._forwardRef:this.context);while(this.o)this.fn++,this.fn>24&&g(4),this.un=0,this.o=!1,n=this.rn(this.props,this._forwardRef?this._forwardRef:this.context);return this.v&&(this.en=n,this.v=!1),this.en},t}(Y),hn=[];function an(n){return n._n}function vn(t){var i=t._internal;if(i){n.i=!0;var r=i.O,u=i._context,f=i.G||u;i.G=void 0,(an(i)||i.xn)&&(i.S(r,r,u,f),x(d)),n.i=!1}}function ln(n,t){return t._internal._mountID-n._internal._mountID}function pn(){if(n.i)return w(pn);var t,i=hn;if(i.length>0){j(),hn=[],i.length>1&&(i=i.filter((function(n){return!!n._internal})).sort(ln));while(t=i.pop())vn(t)}}function dn(n,t){if(hn.indexOf(n)<0&&hn.push(n),t){if(hn.length>1)return;w(pn)}else pn()}function _n(n,t,i){var r=n._internal;if(r){i&&function(n,t){(function(n){return n.wn}(n)||function(n){return n.wn=[]}(n)).push(t)}(r,i);var u=r._renderedComponent;t?(n.tn&&(r.xn=!0),function(n,t){(an(n)||function(n){return n._n=[]}(n)).push(t)}(r,t),!r.yn&&u&&dn(n,!0)):(r.xn=!0,u&&dn(n))}}var xn={setState:function(t,i,r){n.i||j(),_n(t,i,r)},forceUpdate:function(n,t){_n(n,null,t)}};function wn(n,t,i){try{return n()}catch(n){i?i(n):function(n,t){var i=Z(n,(function(n){return n.componentDidCatch||n.constructor&&n.constructor.getDerivedStateFromError}));i?m((function(){var n=i._internal;n&&wn((function(){if(i.componentDidCatch&&i.componentDidCatch(t),i.constructor&&i.constructor.getDerivedStateFromError){var n=i.constructor.getDerivedStateFromError(t);i.setState(n)}}),n.m)})):_((function(){throw t}),0)}(t,n)}}function yn(n,t){m((function(){wn(n,t)}))}function bn(n,t){n&&yn((function(){C(n,t)}),t)}var jn=function(t){function i(){return t.apply(this,arguments)||this}q(i,t);var u=i.prototype;return u.I=function(t,i,u,f){this.g(t,i,u);var o,e,s=this.O,c=s.type,h=s.ref,a=s.props,v=c.prototype,l=this.bn(u);if(wn((function(){v&&v.render?o=new c(a,l):r(c)?o=new cn(c,h):g(6,c)}),i),o){o.props=a,o.context=l,o.refs={},o.updater=xn,o._internal=this,this._instance=o;var p=o.state;void 0===p&&(o.state=p=null),o.componentWillMount&&wn((function(){o.componentWillMount()}),o),n.owner=this,o.state=this.jn(a,l);var d=this.wn;return this.wn=null,wn((function(){e=o.render()}),o),n.owner=null,this._renderedComponent=L(e),this._renderedComponent.I(this._parent,o,this.F(u),f),!s.type._forwardRef&&h&&J(s._owner,h,this),o.componentDidMount&&yn((function(){o.componentDidMount()}),o),bn(d,o),o}},u.unmountComponent=function(n){var t=this._instance;if(t&&t.componentWillUnmount&&wn((function(){t.componentWillUnmount()}),t),null!=this._renderedComponent){var i=this.O,r=i.ref;!i.type._forwardRef&&r&&K(i._owner,r,this),this._renderedComponent.unmountComponent(n),this._renderedComponent=null}this._n=null,this.xn=!1,this.k()},u.bn=function(n){var t={},i=this.O.type.contextTypes;if(i)for(var r in i)t[r]=n[r];return t},u.F=function(n){var t=this._instance,i=t.getChildContext&&t.getChildContext();return i?fn({},n,i):n},u.jn=function(n,t){var i=this._instance,u=this._n;if(!u)return i.state;this._n=null;for(var f=fn({},i.state),o=0;o<u.length;o++){var e=u[o];fn(f,r(e)?e.call(i,f,n,t):e)}return f},u.S=function(n,t,i,r){var u=this,f=this._instance;f&&wn((function(){var i,o,e;u._context===r?o=f.context:(o=u.bn(r),i=!0),e=t.props,n!==t&&(i=!0),i&&f.componentWillReceiveProps&&(u.yn=!0,f.componentWillReceiveProps(e,o),u.yn=!1),u.O.type._forwardRef?(f.cn=n.ref,f._forwardRef=t.ref):G(n,t,u);var s=!0,c=f.props,h=f.state,a=u.jn(e,o),v=u.wn;if(u.wn=null,u.xn||(f.shouldComponentUpdate?s=f.shouldComponentUpdate(e,a,o):f.Z&&(s=!D(c,e)||!D(h,a))),s){u.xn=!1;var l=f.context;f.componentWillUpdate&&f.componentWillUpdate(e,a,o),u.O=t,u._context=r,f.props=e,f.state=a,f.context=o,u.mn(r),f.componentDidUpdate&&yn((function(){f.componentDidUpdate(c,h,l)}),f)}else u.O=t,u._context=r,f.props=e,f.state=a,f.context=o;bn(v,f)}),f)},u.mn=function(t){var i,r=this._renderedComponent,u=r.O,f=this._instance;if(n.owner=this,i=f.render(),n.owner=null,M(u,i)){var e=r._context,s=this.F(t);u===i&&e===s||r.S(u,i,e,s)}else{var c=null,h=r.C();o(h)&&0===h.length&&null==f.q&&(c=X(r)),r.unmountComponent(!0),this._renderedComponent=L(i),this._renderedComponent.I(this._parent,f,this.F(t),(function(t,i){var r=n.driver;h=W(h),t=W(t);for(var u=0;u<t.length;u++){var f=t[u];h[u]?r.replaceChild(f,h[u]):c?r.insertAfter(f,c):r.appendChild(f,i),c=f}for(var o=t.length;o<h.length;o++)r.removeChild(h[o])}))}},u.C=function(){var n=this._renderedComponent;if(n)return n.C()},u.D=function(){var n=this._instance;return n.tn?null:n},i}(B),mn=function(t){function i(){return t.apply(this,arguments)||this}q(i,t);var r=i.prototype;return r.I=function(t,i,r,u){this.g(t,i,r);var f=this._instance={};f._internal=this;var o=[];if(this.L(this._parent,this.O,r,(function(n){n=W(n);for(var t=0;t<n.length;t++)o.push(n[t])})),u)u(o,t);else for(var e=0;e<o.length;e++)n.driver.appendChild(o[e],t);return f},r.unmountComponent=function(t){if(!t)for(var i=this.C(),r=0,u=i.length;r<u;r++)n.driver.removeChild(i[r]);this.M(!0),this.k()},r.S=function(n,t,i,r){this.O=t,this.Y(this.O,r)},r.C=function(){var n=this.V||{};return[].concat.apply([],Object.keys(n).map((function(t){return n[t].C()})))},i}(en);var On={Host:n,Instance:un,Element:t,flattenChildren:v};exports.Component=Y,exports.Fragment=function(n){return n.children},exports.PureComponent=nn,exports.createContext=function(n){var t=\"_c\"+$++;function i(n){return Z(n,(function(n){return n.On===t}))}return{Provider:function(){function i(){this.On=t,this.gn=[]}var r=i.prototype;return r.pn=function(n){this.gn.push(n)},r.dn=function(n){this.gn=this.gn.filter((function(t){return t!==n}))},r._getChildContext=function(){var n;return(n={})[t]=this,n},r.getValue=function(){return void 0!==this.props.value?this.props.value:n},r.componentDidUpdate=function(n){this.props.value!==n.value&&C(this.gn,null,this.getValue())},r.render=function(){return this.props.children},i}(),Consumer:function(u,f){var o=this,e=N((function(){return f[t]||i(o)}))[0],s=e?e.getValue():n,c=N(s),h=c[1];if(s===c[0]){R((function(){if(e)return e.pn(h),function(){e.dn(h)}}),[]);var a=W(u.children)[0];return r(a)?a(s):void 0}h(s)},_contextID:t,_defaultValue:n,an:i}},exports.createElement=A,exports.createRef=function(){return{current:null}},exports.forwardRef=function(n){return n._forwardRef=!0,n},exports.memo=function(n,t){return t=t||D,n.hn?n.hn.push(t):n.hn=[t],n},exports.render=function(t,i,u,f){var o;r(u)&&(f=u,u=null),o=(u=u||h).driver,n.T=F,n.U=en,n.N=sn,n.R=mn,n.H=jn,(n.driver=o||n.driver)||g(5);var e=un.mount(t,i,u).D();return f&&f.call(e),e},exports.shared=On,exports.useCallback=function(n,t){return V((function(){return n}),t)},exports.useContext=function(n){return U().useContext(n)},exports.useEffect=function(n,t){T(n,t,!0)},exports.useImperativeHandle=function(n,t,i){R((function(){return r(n)?(n(t()),function(){return n(null)}):null!=n?(n.current=t(),function(){n.current=null}):void 0}),o(i)?i.concat([n]):null)},exports.useLayoutEffect=R,exports.useMemo=V,exports.useReducer=function(t,i,u){var f=U(),o=f.getHookID(),e=f.getHooks(),s=e[o];if(!s){var c=r(u)?u(i):i;return e[o]=[c,function(t){n.i||j();var i=e[o][2];if(S()===f)i.kn.push(t),f.o=!0;else{var r=i.In,u=(0,i.An)(r,t);if(P(u,r))return;i.In=u,i.kn.push(t),f.h()}},{kn:[],An:t,In:c}]}var h=s[2],a=s[0];if(f.fn>0)for(var v=0;v<h.kn.length;v++)a=t(a,h.kn[v]);else a=h.In;return P(a,s[0])||(s[0]=a,f.v=!0),h.An=t,h.In=a,h.kn.length=0,e[o]},exports.useRef=function(n){var t=U(),i=t.getHookID(),r=t.getHooks();return r[i]||(r[i]={current:n}),r[i]},exports.useState=N,exports.version=\"1.2.2\";\n","/*\n * Stateful things in runtime\n */\nvar Host = {\n  __mountID: 1,\n  __isUpdating: false,\n  // Inject\n  driver: null,\n  // Roots\n  rootComponents: {},\n  rootInstances: {},\n  // Current owner component\n  owner: null\n};\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nvar ReactPropTypesSecret_1 = ReactPropTypesSecret$1;\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar printWarning = function() {};\n\n{\n  var ReactPropTypesSecret = ReactPropTypesSecret_1;\n  var loggedTypeFailures = {};\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  {\n    loggedTypeFailures = {};\n  }\n};\n\nvar checkPropTypes_1 = checkPropTypes;\n\nfunction Element(type, key, ref, props, owner) {\n  var element = {\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    var propTypes = type.propTypes; // Validate its props provided by the propTypes definition\n\n    if (propTypes) {\n      var displayName = type.displayName || type.name;\n      checkPropTypes_1(propTypes, props, 'prop', displayName);\n    } // We make validation flag non-enumerable, so the test framework could ignore it\n\n\n    Object.defineProperty(element, '__validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // Props is immutable\n\n    if (Object.freeze) {\n      Object.freeze(props);\n    }\n  }\n\n  return element;\n}\n\nfunction isNull(obj) {\n  return obj === null;\n}\nfunction isFunction(obj) {\n  return typeof obj === 'function';\n}\nfunction isObject(obj) {\n  return typeof obj === 'object';\n}\nfunction isPlainObject(obj) {\n  return EMPTY_OBJECT.toString.call(obj) === '[object Object]';\n}\nfunction isArray(array) {\n  return Array.isArray(array);\n}\nfunction isString(string) {\n  return typeof string === 'string';\n}\nfunction isNumber(string) {\n  return typeof string === 'number';\n}\nvar NOOP = function NOOP() {};\nvar EMPTY_OBJECT = {};\n\nfunction traverseChildren(children, result) {\n  if (isArray(children)) {\n    for (var i = 0, l = children.length; i < l; i++) {\n      traverseChildren(children[i], result);\n    }\n  } else {\n    result.push(children);\n  }\n}\n\nfunction flattenChildren(children) {\n  if (children == null) {\n    return children;\n  }\n\n  var result = [];\n  traverseChildren(children, result); // If length equal 1, return the only one.\n\n  return result.length - 1 ? result : result[0];\n}\n\nvar updateCallbacks = [];\nvar effectCallbacks = [];\nvar layoutCallbacks = [];\nvar scheduler = setTimeout;\n\n{\n  // Wrapper timer for hijack timers in jest\n  scheduler = function scheduler(callback) {\n    setTimeout(callback);\n  };\n}\n\nfunction invokeFunctionsWithClear(callbacks) {\n  var callback;\n\n  while (callback = callbacks.shift()) {\n    callback();\n  }\n} // Schedule before next render\n\n\nfunction schedule(callback) {\n  if (updateCallbacks.length === 0) {\n    scheduler(flush);\n  }\n\n  updateCallbacks.push(callback);\n} // Flush before next render\n\nfunction flush() {\n  invokeFunctionsWithClear(updateCallbacks);\n}\nfunction scheduleEffect(callback) {\n  if (effectCallbacks.length === 0) {\n    scheduler(flushEffect);\n  }\n\n  effectCallbacks.push(callback);\n}\nfunction flushEffect() {\n  invokeFunctionsWithClear(effectCallbacks);\n}\nfunction scheduleLayout(callback) {\n  layoutCallbacks.push(callback);\n}\nfunction flushLayout() {\n  invokeFunctionsWithClear(layoutCallbacks);\n}\n\nfunction createMinifiedError(type, code, obj) {\n  var typeInfo = obj === undefined ? '' : ' got: ' + getTypeInfo(obj);\n  return new Error(type + \": #\" + code + \", \" + getRenderErrorInfo() + \".\" + typeInfo);\n}\n\nfunction getTypeInfo(obj) {\n  return isPlainObject(obj) ? Object.keys(obj) : obj;\n}\nfunction getRenderErrorInfo() {\n  var ownerComponent = Host.owner;\n  return ownerComponent ? \"check <\" + ownerComponent.__getName() + \">\" : 'no owner';\n}\n/**\n * Minified code:\n *  1: Hooks called outside a component, or multiple version of Rax are used.\n *  6: Invalid component type, expected a class or function component.\n *  4: Too many re-renders, the number of renders is limited to prevent an infinite loop.\n *  5: Rax driver not found.\n * @param code {Number}\n * @param obj {Object}\n */\n\nfunction throwMinifiedError(code, obj) {\n  throw createMinifiedError('Error', code, obj);\n}\nfunction throwError(message, obj) {\n  var typeInfo = obj === undefined ? '' : '(found: ' + (isPlainObject(obj) ? \"object with keys {\" + Object.keys(obj) + \"}\" : obj) + ')';\n  throw Error(message + \" \" + typeInfo);\n}\nvar warning = NOOP;\n\n{\n  warning = function warning(template) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (typeof console !== 'undefined') {\n      var argsWithFormat = args.map(function (item) {\n        return '' + item;\n      });\n      argsWithFormat.unshift('Warning: ' + template); // Don't use spread (or .apply) directly because it breaks IE9\n\n      Function.prototype.apply.call(console.error, console, argsWithFormat);\n    } // For works in DevTools when enable `Pause on caught exceptions`\n    // that can find the component where caused this warning\n\n\n    try {\n      var argIndex = 0;\n      var message = 'Warning: ' + template.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      throw new Error(message);\n    } catch (e) {}\n  };\n}\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = '';\n  var ownerComponent = Host.owner;\n\n  if (ownerComponent) {\n    var name = ownerComponent.__getName();\n\n    if (name) {\n      info = \" Check the render method of <\" + name + \">.\";\n    }\n  }\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      info = \" Check the top-level render call using <\" + parentName + \">.\";\n    }\n  }\n\n  return info;\n}\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.type && !!object.props;\n}\n\nfunction validateExplicitKey(element, parentType) {\n  if (element.__validated || element.key != null) {\n    return;\n  }\n\n  element.__validated = true;\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  var childOwner = '';\n\n  if (element && element._owner && element._owner !== Host.owner) {\n    // Give the component that originally created this child.\n    childOwner = \" It was passed a child from <\" + element._owner.__getName() + \">.\";\n  }\n\n  warning(\"Each child in a list should have a unique \\\"key\\\" prop.\" + currentComponentErrorInfo + childOwner);\n}\n\nfunction validateChildKeys(node, parentType) {\n  // Only array or element object is valid child\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    node.__validated = true;\n  } // Rax don't support iterator object as element children\n  // TODO: add validate when rax support iterator object as element.\n\n}\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true\n};\nfunction createElement(type, config, children) {\n  // Reserved names are extracted\n  var props = {};\n  var propName;\n  var key = null;\n  var ref = null;\n\n  if (config != null) {\n    ref = config.ref === undefined ? null : config.ref;\n    key = config.key === undefined ? null : '' + config.key; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (!RESERVED_PROPS[propName]) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children arguments can be more than one\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength > 0) {\n    if (childrenLength === 1 && !isArray(children)) {\n      props.children = children;\n    } else {\n      var childArray = children;\n\n      if (childrenLength > 1) {\n        childArray = new Array(childrenLength);\n\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n      }\n\n      props.children = flattenChildren(childArray);\n    }\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  if (type == null) {\n    {\n      throwError(\"Invalid element type, expected a string or a class/function component but got \\\"\" + type + \"\\\".\");\n    }\n  }\n\n  {\n    if (isString(ref) && !Host.owner) {\n      warning(\"Adding a string ref \\\"\" + ref + \"\\\" that was not created inside render method, or multiple copies of Rax are used.\");\n    }\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      validateChildKeys(arguments[_i], type);\n    }\n  }\n\n  return new Element(type, key, ref, props, Host.owner);\n}\n\nfunction invokeFunctionsWithContext(fns, context, value) {\n  for (var i = 0, l = fns && fns.length; i < l; i++) {\n    fns[i].call(context, value);\n  }\n}\n\nvar hasOwnProperty = EMPTY_OBJECT.hasOwnProperty;\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\n\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y; // eslint-disable-line no-self-compare\n  }\n}\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\n\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (!isObject(objA) || isNull(objA) || !isObject(objB) || isNull(objB)) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/* Common constant variables for rax */\nvar INTERNAL = '_internal';\nvar INSTANCE = '_instance';\nvar NATIVE_NODE = '_nativeNode';\nvar RENDERED_COMPONENT = '_renderedComponent';\n\nfunction getCurrentInstance() {\n  return Host.owner && Host.owner[INSTANCE];\n}\n\nfunction getCurrentRenderingInstance() {\n  var currentInstance = getCurrentInstance();\n\n  if (currentInstance) {\n    return currentInstance;\n  } else {\n    {\n      throwError('Hooks called outside a component, or multiple version of Rax are used.');\n    }\n  }\n}\n\nfunction areInputsEqual(inputs, prevInputs) {\n  if (isNull(prevInputs) || inputs.length !== prevInputs.length) {\n    return false;\n  }\n\n  for (var i = 0; i < inputs.length; i++) {\n    if (is(inputs[i], prevInputs[i])) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction useState(initialState) {\n  var currentInstance = getCurrentRenderingInstance();\n  var hookID = currentInstance.getHookID();\n  var hooks = currentInstance.getHooks();\n\n  if (!hooks[hookID]) {\n    // If the initial state is the result of an expensive computation,\n    // you may provide a function instead for lazy initial state.\n    if (isFunction(initialState)) {\n      initialState = initialState();\n    }\n\n    var setState = function setState(newState) {\n      // Flush all effects first before update state\n      if (!Host.__isUpdating) {\n        flushEffect();\n      }\n\n      var hook = hooks[hookID];\n      var eagerState = hook[2]; // function updater\n\n      if (isFunction(newState)) {\n        newState = newState(eagerState);\n      }\n\n      if (!is(newState, eagerState)) {\n        // Current instance is in render update phase.\n        // After this one render finish, will continue run.\n        hook[2] = newState;\n\n        if (getCurrentInstance() === currentInstance) {\n          // Marked as is scheduled that could finish hooks.\n          currentInstance.__isScheduled = true;\n        } else {\n          currentInstance.__update();\n        }\n      }\n    };\n\n    hooks[hookID] = [initialState, setState, initialState];\n  }\n\n  var hook = hooks[hookID];\n\n  if (!is(hook[0], hook[2])) {\n    hook[0] = hook[2];\n    currentInstance.__shouldUpdate = true;\n  }\n\n  return hook;\n}\nfunction useContext(context) {\n  var currentInstance = getCurrentRenderingInstance();\n  return currentInstance.useContext(context);\n}\nfunction useEffect(effect, inputs) {\n  useEffectImpl(effect, inputs, true);\n}\nfunction useLayoutEffect(effect, inputs) {\n  useEffectImpl(effect, inputs);\n}\n\nfunction useEffectImpl(effect, inputs, defered) {\n  var currentInstance = getCurrentRenderingInstance();\n  var hookID = currentInstance.getHookID();\n  var hooks = currentInstance.getHooks();\n  inputs = inputs === undefined ? null : inputs;\n\n  if (!hooks[hookID]) {\n    var __create = function __create(immediately) {\n      if (!immediately && defered) return scheduleEffect(function () {\n        return __create(true);\n      });\n      var current = __create.current;\n\n      if (current) {\n        __destory.current = current();\n        __create.current = null;\n\n        {\n          var currentDestory = __destory.current;\n\n          if (currentDestory !== undefined && typeof currentDestory !== 'function') {\n            var msg;\n\n            if (currentDestory === null) {\n              msg = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n            } else if (typeof currentDestory.then === 'function') {\n              msg = '\\n\\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + 'useEffect(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + '}, [someId]); // Or [] if effect doesn\\'t need props or state.';\n            } else {\n              msg = ' You returned: ' + currentDestory;\n            }\n\n            warning('An effect function must not return anything besides a function, ' + 'which is used for clean-up.' + msg);\n          }\n        }\n      }\n    };\n\n    var __destory = function __destory(immediately) {\n      if (!immediately && defered) return scheduleEffect(function () {\n        return __destory(true);\n      });\n      var current = __destory.current;\n\n      if (current) {\n        current();\n        __destory.current = null;\n      }\n    };\n\n    __create.current = effect;\n    hooks[hookID] = {\n      __create: __create,\n      __destory: __destory,\n      __prevInputs: inputs,\n      __inputs: inputs\n    };\n    currentInstance.didMount.push(__create);\n    currentInstance.willUnmount.push(function () {\n      return __destory(true);\n    });\n    currentInstance.didUpdate.push(function () {\n      var _hooks$hookID = hooks[hookID],\n          __prevInputs = _hooks$hookID.__prevInputs,\n          __inputs = _hooks$hookID.__inputs,\n          __create = _hooks$hookID.__create;\n\n      if (__inputs == null || !areInputsEqual(__inputs, __prevInputs)) {\n        __destory();\n\n        __create();\n      }\n    });\n  } else {\n    var hook = hooks[hookID];\n    var _create = hook.__create,\n        prevInputs = hook.__inputs;\n    hook.__inputs = inputs;\n    hook.__prevInputs = prevInputs;\n    _create.current = effect;\n  }\n}\n\nfunction useImperativeHandle(ref, create, inputs) {\n  var nextInputs = isArray(inputs) ? inputs.concat([ref]) : null;\n  useLayoutEffect(function () {\n    if (isFunction(ref)) {\n      ref(create());\n      return function () {\n        return ref(null);\n      };\n    } else if (ref != null) {\n      ref.current = create();\n      return function () {\n        ref.current = null;\n      };\n    }\n  }, nextInputs);\n}\nfunction useRef(initialValue) {\n  var currentInstance = getCurrentRenderingInstance();\n  var hookID = currentInstance.getHookID();\n  var hooks = currentInstance.getHooks();\n\n  if (!hooks[hookID]) {\n    hooks[hookID] = {\n      current: initialValue\n    };\n  }\n\n  return hooks[hookID];\n}\nfunction useCallback(callback, inputs) {\n  return useMemo(function () {\n    return callback;\n  }, inputs);\n}\nfunction useMemo(create, inputs) {\n  var currentInstance = getCurrentRenderingInstance();\n  var hookID = currentInstance.getHookID();\n  var hooks = currentInstance.getHooks();\n  inputs = inputs === undefined ? null : inputs;\n\n  if (!hooks[hookID]) {\n    hooks[hookID] = [create(), inputs];\n  } else {\n    var prevInputs = hooks[hookID][1];\n\n    if (isNull(inputs) || !areInputsEqual(inputs, prevInputs)) {\n      hooks[hookID] = [create(), inputs];\n    }\n  }\n\n  return hooks[hookID][0];\n}\nfunction useReducer(reducer, initialArg, init) {\n  var currentInstance = getCurrentRenderingInstance();\n  var hookID = currentInstance.getHookID();\n  var hooks = currentInstance.getHooks();\n  var hook = hooks[hookID];\n\n  if (!hook) {\n    var initialState = isFunction(init) ? init(initialArg) : initialArg;\n\n    var dispatch = function dispatch(action) {\n      // Flush all effects first before update state\n      if (!Host.__isUpdating) {\n        flushEffect();\n      }\n\n      var hook = hooks[hookID]; // Reducer will update in the next render, before that we add all\n      // actions to the queue\n\n      var queue = hook[2];\n\n      if (getCurrentInstance() === currentInstance) {\n        queue.__actions.push(action);\n\n        currentInstance.__isScheduled = true;\n      } else {\n        var currentState = queue.__eagerState;\n        var eagerReducer = queue.__eagerReducer;\n        var eagerState = eagerReducer(currentState, action);\n\n        if (is(eagerState, currentState)) {\n          return;\n        }\n\n        queue.__eagerState = eagerState;\n\n        queue.__actions.push(action);\n\n        currentInstance.__update();\n      }\n    };\n\n    return hooks[hookID] = [initialState, dispatch, {\n      __actions: [],\n      __eagerReducer: reducer,\n      __eagerState: initialState\n    }];\n  }\n\n  var queue = hook[2];\n  var next = hook[0];\n\n  if (currentInstance.__reRenders > 0) {\n    for (var i = 0; i < queue.__actions.length; i++) {\n      next = reducer(next, queue.__actions[i]);\n    }\n  } else {\n    next = queue.__eagerState;\n  }\n\n  if (!is(next, hook[0])) {\n    hook[0] = next;\n    currentInstance.__shouldUpdate = true;\n  }\n\n  queue.__eagerReducer = reducer;\n  queue.__eagerState = next;\n  queue.__actions.length = 0;\n  return hooks[hookID];\n}\n\nfunction toArray(obj) {\n  return isArray(obj) ? obj : [obj];\n}\n\nfunction getNearestParent(instance, matcher) {\n  var parent;\n\n  while (instance && instance[INTERNAL]) {\n    if (matcher(instance)) {\n      parent = instance;\n      break;\n    }\n\n    instance = instance[INTERNAL].__parentInstance;\n  }\n\n  return parent;\n}\n\nvar id = 0;\nfunction createContext(defaultValue) {\n  var contextID = '_c' + id++; // Provider Component\n\n  var Provider = /*#__PURE__*/function () {\n    function Provider() {\n      this.__contextID = contextID;\n      this.__handlers = [];\n    }\n\n    var _proto = Provider.prototype;\n\n    _proto.__on = function __on(handler) {\n      this.__handlers.push(handler);\n    };\n\n    _proto.__off = function __off(handler) {\n      this.__handlers = this.__handlers.filter(function (h) {\n        return h !== handler;\n      });\n    } // Like getChildContext but called in SSR\n    ;\n\n    _proto._getChildContext = function _getChildContext() {\n      var _ref;\n\n      return _ref = {}, _ref[contextID] = this, _ref;\n    } // `getValue()` called in rax-server-renderer\n    ;\n\n    _proto.getValue = function getValue() {\n      return this.props.value !== undefined ? this.props.value : defaultValue;\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n      if (this.props.value !== prevProps.value) {\n        invokeFunctionsWithContext(this.__handlers, null, this.getValue());\n      }\n    };\n\n    _proto.render = function render() {\n      return this.props.children;\n    };\n\n    return Provider;\n  }();\n\n  function getNearestParentProvider(instance) {\n    return getNearestParent(instance, function (parent) {\n      return parent.__contextID === contextID;\n    });\n  } // Consumer Component\n\n\n  function Consumer(props, context) {\n    var _this = this;\n\n    // Current `context[contextID]` only works in SSR\n    var _useState = useState(function () {\n      return context[contextID] || getNearestParentProvider(_this);\n    }),\n        provider = _useState[0];\n\n    var value = provider ? provider.getValue() : defaultValue;\n\n    var _useState2 = useState(value),\n        prevValue = _useState2[0],\n        setValue = _useState2[1];\n\n    if (value !== prevValue) {\n      setValue(value);\n      return; // Interrupt execution of consumer.\n    }\n\n    useLayoutEffect(function () {\n      if (provider) {\n        provider.__on(setValue);\n\n        return function () {\n          provider.__off(setValue);\n        };\n      }\n    }, []); // Consumer requires a function as a child.\n    // The function receives the current context value.\n\n    var consumer = toArray(props.children)[0];\n\n    if (isFunction(consumer)) {\n      return consumer(value);\n    }\n  }\n\n  return {\n    Provider: Provider,\n    Consumer: Consumer,\n    // `_contextID` and `_defaultValue` accessed in rax-server-renderer\n    _contextID: contextID,\n    _defaultValue: defaultValue,\n    __getNearestParentProvider: getNearestParentProvider\n  };\n}\n\nfunction createRef() {\n  return {\n    current: null\n  };\n}\n\nfunction forwardRef (render) {\n  // _forwardRef is also use in rax server renderer\n  render._forwardRef = true;\n  return render;\n}\n\nfunction memo(type, compare) {\n  compare = compare || shallowEqual; // Memo could composed\n\n  if (type.__compares) {\n    type.__compares.push(compare);\n  } else {\n    type.__compares = [compare];\n  }\n\n  return type;\n}\n\nfunction Fragment(props) {\n  return props.children;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\n/**\n * Base Component\n */\n\nvar BaseComponent = /*#__PURE__*/function () {\n  function BaseComponent(element) {\n    this.__currentElement = element;\n  }\n\n  var _proto = BaseComponent.prototype;\n\n  _proto.__initComponent = function __initComponent(parent, parentInstance, context) {\n    this._parent = parent;\n    this.__parentInstance = parentInstance;\n    this._context = context;\n    this._mountID = Host.__mountID++;\n  };\n\n  _proto.__destoryComponent = function __destoryComponent() {\n    {\n      Host.reconciler.unmountComponent(this);\n    }\n\n    this.__currentElement = this[NATIVE_NODE] = this._parent = this.__parentInstance = this._context = null;\n\n    if (this[INSTANCE]) {\n      this[INSTANCE] = this[INSTANCE][INTERNAL] = null;\n    }\n  };\n\n  _proto.__mountComponent = function __mountComponent(parent, parentInstance, context, nativeNodeMounter) {\n    this.__initComponent(parent, parentInstance, context);\n\n    this.__mountNativeNode(nativeNodeMounter);\n\n    {\n      Host.reconciler.mountComponent(this);\n    }\n\n    var instance = {};\n    instance[INTERNAL] = this;\n    return instance;\n  };\n\n  _proto.unmountComponent = function unmountComponent(shouldNotRemoveChild) {\n    if (this[NATIVE_NODE] && !shouldNotRemoveChild) {\n      Host.driver.removeChild(this[NATIVE_NODE], this._parent);\n    }\n\n    this.__destoryComponent();\n  };\n\n  _proto.__getName = function __getName() {\n    var currentElement = this.__currentElement;\n    var type = currentElement && currentElement.type;\n    return type && type.displayName || type && type.name || type || // Native component's name is type\n    currentElement;\n  };\n\n  _proto.__mountNativeNode = function __mountNativeNode(nativeNodeMounter) {\n    var nativeNode = this.__getNativeNode();\n\n    var parent = this._parent;\n\n    if (nativeNodeMounter) {\n      nativeNodeMounter(nativeNode, parent);\n    } else {\n      Host.driver.appendChild(nativeNode, parent);\n    }\n  };\n\n  _proto.__getNativeNode = function __getNativeNode() {\n    return this[NATIVE_NODE] == null ? this[NATIVE_NODE] = this.__createNativeNode() : this[NATIVE_NODE];\n  };\n\n  _proto.__getPublicInstance = function __getPublicInstance() {\n    return this.__getNativeNode();\n  };\n\n  return BaseComponent;\n}();\n\n/**\n * Empty Component\n */\n\nvar EmptyComponent = /*#__PURE__*/function (_BaseComponent) {\n  _inheritsLoose(EmptyComponent, _BaseComponent);\n\n  function EmptyComponent() {\n    return _BaseComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = EmptyComponent.prototype;\n\n  _proto.__createNativeNode = function __createNativeNode() {\n    return Host.driver.createEmpty(this);\n  };\n\n  _proto.__updateComponent = function __updateComponent() {\n    return;\n  };\n\n  return EmptyComponent;\n}(BaseComponent);\n\n/*\n * Ref manager\n */\nfunction updateRef(prevElement, nextElement, component) {\n  var prevRef = prevElement ? prevElement.ref : null;\n  var nextRef = nextElement ? nextElement.ref : null; // Update refs in owner component\n\n  if (prevRef !== nextRef) {\n    // Detach prev RenderedElement's ref\n    prevRef && detachRef(prevElement._owner, prevRef, component); // Attach next RenderedElement's ref\n\n    nextRef && attachRef(nextElement._owner, nextRef, component);\n  }\n}\nfunction attachRef(ownerComponent, ref, component) {\n  if (!ownerComponent) {\n    {\n      warning('Ref can not attach because multiple copies of Rax are used.');\n    }\n\n    return;\n  }\n\n  var instance = component.__getPublicInstance();\n\n  {\n    if (instance == null) {\n      warning('Do not attach ref to function component because they don’t have instances.');\n    }\n  }\n\n  if (isFunction(ref)) {\n    ref(instance);\n  } else if (isObject(ref)) {\n    ref.current = instance;\n  } else {\n    ownerComponent[INSTANCE].refs[ref] = instance;\n  }\n}\nfunction detachRef(ownerComponent, ref, component) {\n  if (isFunction(ref)) {\n    // When the referenced component is unmounted and whenever the ref changes, the old ref will be called with null as an argument.\n    ref(null);\n  } else {\n    // Must match component and ref could detach the ref on owner when A's before ref is B's current ref\n    var instance = component.__getPublicInstance();\n\n    if (isObject(ref) && ref.current === instance) {\n      ref.current = null;\n    } else if (ownerComponent[INSTANCE].refs[ref] === instance) {\n      delete ownerComponent[INSTANCE].refs[ref];\n    }\n  }\n}\n\nfunction instantiateComponent(element) {\n  var instance;\n\n  if (isPlainObject(element) && element !== null && element.type) {\n    // Special case string values\n    if (isString(element.type)) {\n      instance = new Host.__Native(element);\n    } else {\n      instance = new Host.__Composite(element);\n    }\n  } else if (isString(element) || isNumber(element)) {\n    instance = new Host.__Text(String(element));\n  } else if (isArray(element)) {\n    instance = new Host.__Fragment(element);\n  } else {\n    if (!(element === undefined || isNull(element) || element === false || element === true)) {\n      {\n        throwError('Invalid child type, expected types: Element instance, string, boolean, array, null, undefined.', element);\n      }\n    }\n\n    instance = new Host.__Empty(element);\n  }\n\n  return instance;\n}\n\nfunction shouldUpdateComponent(prevElement, nextElement) {\n  var prevEmpty = isNull(prevElement);\n  var nextEmpty = isNull(nextElement);\n\n  if (prevEmpty || nextEmpty) {\n    return prevEmpty === nextEmpty;\n  }\n\n  if (isArray(prevElement) && isArray(nextElement)) {\n    return true;\n  }\n\n  var isPrevStringOrNumber = isString(prevElement) || isNumber(prevElement);\n\n  if (isPrevStringOrNumber) {\n    return isString(nextElement) || isNumber(nextElement);\n  } else {\n    // prevElement and nextElement could be array, typeof [] is \"object\"\n    return isObject(prevElement) && isObject(nextElement) && prevElement.type === nextElement.type && prevElement.key === nextElement.key;\n  }\n}\n\nfunction getElementKeyName(children, element, index) {\n  var elementKey = element && element.key;\n  var defaultName = '.' + index.toString(36); // Inner child name default format fallback\n  // Key should must be string type\n\n  if (isString(elementKey)) {\n    var keyName = '$' + elementKey; // Child keys must be unique.\n\n    var keyUnique = children[keyName] === undefined;\n\n    {\n      if (!keyUnique) {\n        // Only the first child will be used when encountered two children with the same key\n        warning(\"Encountered two children with the same key \\\"\" + elementKey + \"\\\".\");\n      }\n    }\n\n    return keyUnique ? keyName : defaultName;\n  } else {\n    return defaultName;\n  }\n}\n\n/**\n * This function is usually been used to find the closet previous sibling native node of FragmentComponent.\n * FragmentComponent does not have a native node in the DOM tree, so when it is replaced, the new node has no corresponding location to insert.\n * So we need to look forward from the current mount position of the FragmentComponent to the nearest component which have the native node.\n * @param component\n * @return nativeNode\n */\n\nfunction getPrevSiblingNativeNode(component) {\n  var parent = component;\n\n  while (parent = component.__parentInstance && component.__parentInstance[INTERNAL]) {\n    if (parent instanceof Host.__Composite) {\n      component = parent;\n      continue;\n    }\n\n    var keys = Object.keys(parent.__renderedChildren); // Find previous sibling native node from current mount index\n\n    for (var i = component.__mountIndex - 1; i >= 0; i--) {\n      var nativeNode = parent.__renderedChildren[keys[i]].__getNativeNode(); // Fragment component always return array\n\n\n      if (isArray(nativeNode)) {\n        if (nativeNode.length > 0) {\n          // Get the last one\n          return nativeNode[nativeNode.length - 1];\n        }\n      } else {\n        // Others maybe native node or empty node\n        return nativeNode;\n      }\n    } // Find parent over parent\n\n\n    if (parent instanceof Host.__Fragment) {\n      component = parent;\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Base component class.\n */\nvar Component = /*#__PURE__*/function () {\n  function Component(props, context) {\n    this.props = props;\n    this.context = context;\n    this.refs = {};\n  }\n\n  var _proto = Component.prototype;\n\n  _proto.setState = function setState(partialState, callback) {\n    // The updater property is injected when composite component mounting\n    this.updater.setState(this, partialState, callback);\n  };\n\n  _proto.forceUpdate = function forceUpdate(callback) {\n    this.updater.forceUpdate(this, callback);\n  };\n\n  return Component;\n}();\nvar PureComponent = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(PureComponent, _Component);\n\n  function PureComponent(props, context) {\n    var _this;\n\n    _this = _Component.call(this, props, context) || this;\n    _this.__isPureComponent = true;\n    return _this;\n  }\n\n  return PureComponent;\n}(Component);\n\nvar rootID = 1;\n\nvar Root = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Root, _Component);\n\n  function Root() {\n    var _this;\n\n    _this = _Component.call(this) || this; // Using fragment instead of null for avoid create a comment node when init mount\n\n    _this.__element = [];\n    _this.__rootID = rootID++;\n    return _this;\n  }\n\n  var _proto = Root.prototype;\n\n  _proto.__getPublicInstance = function __getPublicInstance() {\n    return this.__getRenderedComponent().__getPublicInstance();\n  };\n\n  _proto.__getRenderedComponent = function __getRenderedComponent() {\n    return this[INTERNAL][RENDERED_COMPONENT];\n  };\n\n  _proto.__update = function __update(element) {\n    this.__element = element;\n    this.forceUpdate();\n  };\n\n  _proto.render = function render() {\n    return this.__element;\n  };\n\n  return Root;\n}(Component);\n\n/**\n * Instance manager\n * @NOTE Key should not be compressed, for that will be added to native node and cause DOM Exception.\n */\n\nvar KEY = '_r';\nvar Instance = {\n  set: function set(node, instance) {\n    if (!node[KEY]) {\n      node[KEY] = instance; // Record root instance to roots map\n\n      if (instance.__rootID) {\n        Host.rootInstances[instance.__rootID] = instance;\n        Host.rootComponents[instance.__rootID] = instance[INTERNAL];\n      }\n    }\n  },\n  get: function get(node) {\n    return node[KEY];\n  },\n  remove: function remove(node) {\n    var instance = this.get(node);\n\n    if (instance) {\n      node[KEY] = null;\n\n      if (instance.__rootID) {\n        delete Host.rootComponents[instance.__rootID];\n        delete Host.rootInstances[instance.__rootID];\n      }\n    }\n  },\n  mount: function mount(element, container, _ref) {\n    var parent = _ref.parent,\n        hydrate = _ref.hydrate;\n\n    {\n      Host.measurer && Host.measurer.beforeRender();\n    }\n\n    var driver = Host.driver; // Real native root node is body\n\n    if (container == null) {\n      container = driver.createBody();\n    }\n\n    var renderOptions = {\n      element: element,\n      container: container,\n      hydrate: hydrate\n    }; // Before render callback\n\n    driver.beforeRender && driver.beforeRender(renderOptions); // Get the context from the conceptual parent component.\n\n    var parentContext;\n\n    if (parent) {\n      var parentInternal = parent[INTERNAL];\n      parentContext = parentInternal.__processChildContext(parentInternal._context);\n    } // Update root component\n\n\n    var prevRootInstance = this.get(container);\n\n    if (prevRootInstance && prevRootInstance.__rootID) {\n      if (parentContext) {\n        // Using __penddingContext to pass new context\n        prevRootInstance[INTERNAL].__penddingContext = parentContext;\n      }\n\n      prevRootInstance.__update(element); // After render callback\n\n\n      driver.afterRender && driver.afterRender(renderOptions);\n      return prevRootInstance;\n    } // Init root component with empty children\n\n\n    var renderedComponent = instantiateComponent(createElement(Root));\n    var defaultContext = parentContext || {};\n\n    var rootInstance = renderedComponent.__mountComponent(container, parent, defaultContext);\n\n    this.set(container, rootInstance); // Mount new element through update queue avoid when there is in rendering phase\n\n    rootInstance.__update(element); // After render callback\n\n\n    driver.afterRender && driver.afterRender(renderOptions);\n\n    {\n      // Devtool render new root hook\n      Host.reconciler.renderNewRootComponent(rootInstance[INTERNAL][RENDERED_COMPONENT]);\n      Host.measurer && Host.measurer.afterRender();\n    }\n\n    return rootInstance;\n  }\n};\n\nvar assign = Object.assign;\n\nvar STYLE = 'style';\nvar CHILDREN = 'children';\nvar TREE = 'tree';\nvar EVENT_PREFIX_REGEXP = /^on[A-Z]/;\n/**\n * Native Component\n */\n\nvar NativeComponent = /*#__PURE__*/function (_BaseComponent) {\n  _inheritsLoose(NativeComponent, _BaseComponent);\n\n  function NativeComponent() {\n    return _BaseComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = NativeComponent.prototype;\n\n  _proto.__mountComponent = function __mountComponent(parent, parentInstance, context, nativeNodeMounter) {\n    this.__initComponent(parent, parentInstance, context);\n\n    var currentElement = this.__currentElement;\n    var props = currentElement.props;\n    var type = currentElement.type;\n    var children = props[CHILDREN];\n    var appendType = props.append || TREE; // Default is tree\n    // Clone a copy for style diff\n\n    this.__prevStyleCopy = assign({}, props[STYLE]);\n    var instance = {\n      type: type,\n      props: props\n    };\n    instance[INTERNAL] = this;\n    this[INSTANCE] = instance;\n\n    if (appendType === TREE) {\n      // Should after process children when mount by tree mode\n      this.__mountChildren(children, context);\n\n      this.__mountNativeNode(nativeNodeMounter);\n    } else {\n      // Should before process children when mount by node mode\n      this.__mountNativeNode(nativeNodeMounter);\n\n      this.__mountChildren(children, context);\n    } // Ref acttach\n\n\n    if (currentElement && currentElement.ref) {\n      attachRef(currentElement._owner, currentElement.ref, this);\n    }\n\n    {\n      Host.reconciler.mountComponent(this);\n    }\n\n    return instance;\n  };\n\n  _proto.__mountChildren = function __mountChildren(children, context) {\n    if (children == null) return children;\n\n    var nativeNode = this.__getNativeNode();\n\n    return this.__mountChildrenImpl(nativeNode, toArray(children), context);\n  };\n\n  _proto.__mountChildrenImpl = function __mountChildrenImpl(parent, children, context, nativeNodeMounter) {\n    var renderedChildren = this.__renderedChildren = {};\n    var renderedChildrenImage = [];\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      var element = children[i];\n      var renderedChild = instantiateComponent(element);\n      var name = getElementKeyName(renderedChildren, element, i);\n      renderedChildren[name] = renderedChild;\n      renderedChild.__mountIndex = i; // Mount children\n\n      var mountImage = renderedChild.__mountComponent(parent, this[INSTANCE], context, nativeNodeMounter);\n\n      renderedChildrenImage.push(mountImage);\n    }\n\n    return renderedChildrenImage;\n  };\n\n  _proto.__unmountChildren = function __unmountChildren(shouldNotRemoveChild) {\n    var renderedChildren = this.__renderedChildren;\n\n    if (renderedChildren) {\n      for (var name in renderedChildren) {\n        var renderedChild = renderedChildren[name];\n        renderedChild.unmountComponent(shouldNotRemoveChild);\n      }\n\n      this.__renderedChildren = null;\n    }\n  };\n\n  _proto.unmountComponent = function unmountComponent(shouldNotRemoveChild) {\n    if (this[NATIVE_NODE]) {\n      var ref = this.__currentElement.ref;\n\n      if (ref) {\n        detachRef(this.__currentElement._owner, ref, this);\n      }\n\n      Instance.remove(this[NATIVE_NODE]);\n\n      if (!shouldNotRemoveChild) {\n        Host.driver.removeChild(this[NATIVE_NODE], this._parent);\n      }\n    }\n\n    this.__unmountChildren(true);\n\n    this.__prevStyleCopy = null;\n\n    this.__destoryComponent();\n  };\n\n  _proto.__updateComponent = function __updateComponent(prevElement, nextElement, prevContext, nextContext) {\n    // Replace current element\n    this.__currentElement = nextElement;\n    updateRef(prevElement, nextElement, this);\n    var prevProps = prevElement.props;\n    var nextProps = nextElement.props;\n\n    this.__updateProperties(prevProps, nextProps); // If the prevElement has no child, mount children directly\n\n\n    if (prevProps[CHILDREN] == null || isArray(prevProps[CHILDREN]) && prevProps[CHILDREN].length === 0) {\n      this.__mountChildren(nextProps[CHILDREN], nextContext);\n    } else {\n      this.__updateChildren(nextProps[CHILDREN], nextContext);\n    }\n\n    {\n      Host.reconciler.receiveComponent(this);\n    }\n  };\n\n  _proto.__updateProperties = function __updateProperties(prevProps, nextProps) {\n    var propKey;\n    var styleName;\n    var styleUpdates;\n    var driver = Host.driver;\n\n    var nativeNode = this.__getNativeNode();\n\n    for (propKey in prevProps) {\n      // Continue children and null value prop or nextProps has some propKey that do noting\n      if (propKey === CHILDREN || prevProps[propKey] == null || // Use hasOwnProperty here for avoid propKey name is some with method name in object proptotype\n      nextProps.hasOwnProperty(propKey)) {\n        continue;\n      }\n\n      if (propKey === STYLE) {\n        // Remove all style\n        var lastStyle = this.__prevStyleCopy;\n\n        for (styleName in lastStyle) {\n          styleUpdates = styleUpdates || {};\n          styleUpdates[styleName] = '';\n        }\n\n        this.__prevStyleCopy = null;\n      } else if (EVENT_PREFIX_REGEXP.test(propKey)) {\n        // Remove event\n        var eventListener = prevProps[propKey];\n\n        if (isFunction(eventListener)) {\n          driver.removeEventListener(nativeNode, propKey.slice(2).toLowerCase(), eventListener);\n        }\n      } else {\n        // Remove attribute\n        driver.removeAttribute(nativeNode, propKey, prevProps[propKey]);\n      }\n    }\n\n    for (propKey in nextProps) {\n      var nextProp = nextProps[propKey];\n      var prevProp = propKey === STYLE ? this.__prevStyleCopy : prevProps != null ? prevProps[propKey] : undefined; // Continue children or prevProp equal nextProp\n\n      if (propKey === CHILDREN || prevProp === nextProp || nextProp == null && prevProp == null) {\n        continue;\n      } // Update style\n\n\n      if (propKey === STYLE) {\n        if (nextProp) {\n          // Clone property\n          nextProp = this.__prevStyleCopy = assign({}, nextProp);\n        } else {\n          this.__prevStyleCopy = null;\n        }\n\n        if (prevProp != null) {\n          // Unset styles on `prevProp` but not on `nextProp`.\n          for (styleName in prevProp) {\n            if (!nextProp || !nextProp[styleName] && nextProp[styleName] !== 0) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = '';\n            }\n          } // Update styles that changed since `prevProp`.\n\n\n          for (styleName in nextProp) {\n            if (prevProp[styleName] !== nextProp[styleName]) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = nextProp[styleName];\n            }\n          }\n        } else {\n          // Assign next prop when prev style is null\n          styleUpdates = nextProp;\n        }\n      } else if (EVENT_PREFIX_REGEXP.test(propKey)) {\n        // Update event binding\n        var eventName = propKey.slice(2).toLowerCase();\n\n        if (isFunction(prevProp)) {\n          driver.removeEventListener(nativeNode, eventName, prevProp, nextProps);\n        }\n\n        if (isFunction(nextProp)) {\n          driver.addEventListener(nativeNode, eventName, nextProp, nextProps);\n        }\n      } else {\n        // Update other property\n        if (nextProp != null) {\n          driver.setAttribute(nativeNode, propKey, nextProp);\n        } else {\n          driver.removeAttribute(nativeNode, propKey, prevProps[propKey]);\n        }\n\n        {\n          var _payload;\n\n          Host.measurer && Host.measurer.recordOperation({\n            instanceID: this._mountID,\n            type: 'update attribute',\n            payload: (_payload = {}, _payload[propKey] = nextProp, _payload)\n          });\n        }\n      }\n    }\n\n    if (styleUpdates) {\n      {\n        Host.measurer && Host.measurer.recordOperation({\n          instanceID: this._mountID,\n          type: 'update style',\n          payload: styleUpdates\n        });\n      }\n\n      driver.setStyle(nativeNode, styleUpdates);\n    }\n  };\n\n  _proto.__updateChildren = function __updateChildren(nextChildrenElements, context) {\n    // prev rendered children\n    var prevChildren = this.__renderedChildren;\n    var driver = Host.driver;\n\n    if (nextChildrenElements == null && prevChildren == null) {\n      return;\n    }\n\n    var nextChildren = {};\n\n    if (nextChildrenElements != null) {\n      nextChildrenElements = toArray(nextChildrenElements); // Update next children elements\n\n      for (var index = 0, length = nextChildrenElements.length; index < length; index++) {\n        var nextElement = nextChildrenElements[index];\n        var name = getElementKeyName(nextChildren, nextElement, index);\n        var prevChild = prevChildren && prevChildren[name];\n        var prevElement = prevChild && prevChild.__currentElement;\n        var prevContext = prevChild && prevChild._context; // Try to update between the two of some name that has some element type,\n        // and move child in next children loop if need\n\n        if (prevChild != null && shouldUpdateComponent(prevElement, nextElement)) {\n          if (prevElement !== nextElement || prevContext !== context) {\n            // Pass the same context when updating children\n            prevChild.__updateComponent(prevElement, nextElement, context, context);\n          }\n\n          nextChildren[name] = prevChild;\n        } else {\n          // Unmount the prevChild when some name with nextChild but different element type,\n          // and move child node in next children loop\n          if (prevChild) {\n            prevChild.__unmount = true;\n          } // The child must be instantiated before it's mounted.\n\n\n          nextChildren[name] = instantiateComponent(nextElement);\n        }\n      }\n    }\n\n    var parent = this.__getNativeNode();\n\n    var isFragmentParent = isArray(parent);\n    var prevFirstChild = null;\n    var prevFirstNativeNode = null;\n    var isPrevFirstEmptyFragment = false;\n    var shouldUnmountPrevFirstChild = false;\n    var lastPlacedNode = null; // Directly remove all children from component, if nextChildren is empty (null, [], '').\n    // `driver.removeChildren` is optional driver protocol.\n\n    var shouldRemoveAllChildren = Boolean(driver.removeChildren // nextChildElements == null or nextChildElements is empty\n    && (isNull(nextChildrenElements) || nextChildrenElements && !nextChildrenElements.length) // Fragment parent can not remove parentNode's all child nodes directly.\n    && !isFragmentParent); // Unmount children that are no longer present.\n\n    if (prevChildren != null) {\n      for (var _name in prevChildren) {\n        var _prevChild = prevChildren[_name];\n        var shouldUnmount = _prevChild.__unmount || !nextChildren[_name]; // Store old first child ref for append node ahead and maybe delay remove it\n\n        if (!prevFirstChild) {\n          shouldUnmountPrevFirstChild = shouldUnmount;\n          prevFirstChild = _prevChild;\n          prevFirstNativeNode = prevFirstChild.__getNativeNode();\n\n          if (isArray(prevFirstNativeNode)) {\n            isPrevFirstEmptyFragment = prevFirstNativeNode.length === 0;\n            prevFirstNativeNode = prevFirstNativeNode[0];\n          }\n        } else if (shouldUnmount) {\n          _prevChild.unmountComponent(shouldRemoveAllChildren);\n        }\n      } // 1. When fragment embed fragment updated but prev fragment is empty\n      // that need to get the prev sibling native node.\n      // like: [ [] ] -> [ [1, 2] ]\n      // 2. When prev fragment is empty and update to other type\n      // like: [ [], 1 ] -> [ 1, 2 ]\n\n\n      if (isFragmentParent && parent.length === 0 || isPrevFirstEmptyFragment) {\n        lastPlacedNode = getPrevSiblingNativeNode(this);\n      }\n    }\n\n    if (nextChildren != null) {\n      var insertNodes = function insertNodes(nativeNodes, parentNode) {\n        // The nativeNodes maybe fragment, so convert to array type\n        nativeNodes = toArray(nativeNodes);\n\n        for (var i = 0, l = nativeNodes.length; i < l; i++) {\n          if (lastPlacedNode) {\n            // Should reverse order when insert new child after lastPlacedNode:\n            // [lastPlacedNode, *newChild1, *newChild2],\n            // And if prev is empty fragment, lastPlacedNode is the prevSiblingNativeNode found.\n            driver.insertAfter(nativeNodes[l - 1 - i], lastPlacedNode);\n          } else if (prevFirstNativeNode) {\n            // [*newChild1, *newChild2, prevFirstNativeNode]\n            driver.insertBefore(nativeNodes[i], prevFirstNativeNode);\n          } else if (parentNode) {\n            // [*newChild1, *newChild2]\n            driver.appendChild(nativeNodes[i], parentNode);\n          }\n        }\n      };\n\n      // `nextIndex` will increment for each child in `nextChildren`\n      var nextIndex = 0;\n\n      for (var _name2 in nextChildren) {\n        var nextChild = nextChildren[_name2];\n\n        var _prevChild2 = prevChildren && prevChildren[_name2]; // Try to move the some key prevChild but current not at the some position\n\n\n        if (_prevChild2 === nextChild) {\n          var prevChildNativeNode = _prevChild2.__getNativeNode();\n\n          if (_prevChild2.__mountIndex !== nextIndex) {\n            insertNodes(prevChildNativeNode);\n          }\n        } else {\n          // Mount nextChild that in prevChildren there has no some name\n          // Fragment extended native component, so if parent is fragment should get this._parent\n          if (isFragmentParent) {\n            parent = this._parent;\n          }\n\n          nextChild.__mountComponent(parent, this[INSTANCE], context, insertNodes // Insert nodes mounter\n          );\n        } // Update to the latest mount order\n\n\n        nextChild.__mountIndex = nextIndex++; // Get the last child\n\n        lastPlacedNode = nextChild.__getNativeNode();\n\n        if (isArray(lastPlacedNode)) {\n          lastPlacedNode = lastPlacedNode[lastPlacedNode.length - 1];\n        }\n      }\n    }\n\n    if (shouldUnmountPrevFirstChild) {\n      prevFirstChild.unmountComponent(shouldRemoveAllChildren);\n    }\n\n    if (shouldRemoveAllChildren) {\n      driver.removeChildren(this[NATIVE_NODE]);\n    }\n\n    this.__renderedChildren = nextChildren;\n  };\n\n  _proto.__createNativeNode = function __createNativeNode() {\n    var instance = this[INSTANCE];\n    var nativeNode = Host.driver.createElement(instance.type, instance.props, this);\n    Instance.set(nativeNode, instance);\n    return nativeNode;\n  };\n\n  return NativeComponent;\n}(BaseComponent);\n\n/**\n * Text Component\n */\n\nvar TextComponent = /*#__PURE__*/function (_BaseComponent) {\n  _inheritsLoose(TextComponent, _BaseComponent);\n\n  function TextComponent() {\n    return _BaseComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = TextComponent.prototype;\n\n  _proto.__updateComponent = function __updateComponent(prevElement, nextElement, context) {\n    nextElement = '' + nextElement; // If text is some value that do not update even there number 1 and string \"1\"\n\n    if (prevElement !== nextElement) {\n      // Replace current element\n      this.__currentElement = nextElement;\n      Host.driver.updateText(this.__getNativeNode(), nextElement);\n\n      {\n        this._stringText = this.__currentElement;\n        Host.reconciler.receiveComponent(this);\n      }\n    }\n  };\n\n  _proto.__createNativeNode = function __createNativeNode() {\n    {\n      this._stringText = this.__currentElement;\n    }\n\n    return Host.driver.createText(this.__currentElement, this);\n  };\n\n  return TextComponent;\n}(BaseComponent);\n\nvar RE_RENDER_LIMIT = 24;\n/**\n * Functional Reactive Component Class Wrapper\n */\n\nvar ReactiveComponent = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(ReactiveComponent, _Component);\n\n  function ReactiveComponent(pureRender, ref) {\n    var _this;\n\n    _this = _Component.call(this) || this; // Marked ReactiveComponent.\n\n    _this.__isReactiveComponent = true; // A pure function\n\n    _this.__render = pureRender;\n    _this.__hookID = 0; // Number of rerenders\n\n    _this.__reRenders = 0;\n    _this.__hooks = {}; // Is render scheduled\n\n    _this.__isScheduled = false;\n    _this.__shouldUpdate = false;\n    _this.__children = null;\n    _this.__contexts = {}; // Handles store\n\n    _this.didMount = [];\n    _this.didUpdate = [];\n    _this.willUnmount = [];\n    _this.state = EMPTY_OBJECT;\n\n    if (pureRender._forwardRef) {\n      _this.__prevForwardRef = _this._forwardRef = ref;\n    }\n\n    var compares = pureRender.__compares;\n\n    if (compares) {\n      _this.shouldComponentUpdate = function (nextProps) {\n        // Process composed compare\n        var arePropsEqual = true; // Compare push in and pop out\n\n        for (var i = compares.length - 1; i > -1; i--) {\n          if (arePropsEqual = compares[i](_this.props, nextProps)) {\n            break;\n          }\n        }\n\n        return !arePropsEqual || _this.__prevForwardRef !== _this._forwardRef;\n      };\n    }\n\n    return _this;\n  }\n\n  var _proto = ReactiveComponent.prototype;\n\n  _proto.getHooks = function getHooks() {\n    return this.__hooks;\n  };\n\n  _proto.getHookID = function getHookID() {\n    return ++this.__hookID;\n  };\n\n  _proto.useContext = function useContext(context) {\n    var _this2 = this;\n\n    var contextID = context._contextID;\n    var contextItem = this.__contexts[contextID];\n\n    if (!contextItem) {\n      var provider = context.__getNearestParentProvider(this);\n\n      contextItem = this.__contexts[contextID] = {\n        __provider: provider\n      };\n\n      if (provider) {\n        var handleContextChange = function handleContextChange(value) {\n          // Check the last value that maybe alread rerender\n          // avoid rerender twice when provider value changed\n          if (contextItem.__lastValue !== value) {\n            _this2.__shouldUpdate = true;\n\n            _this2.__update();\n          }\n        };\n\n        provider.__on(handleContextChange);\n\n        this.willUnmount.push(function () {\n          return provider.__off(handleContextChange);\n        });\n      }\n    }\n\n    return contextItem.__lastValue = contextItem.__provider ? contextItem.__provider.getValue() : context._defaultValue;\n  };\n\n  _proto.componentWillMount = function componentWillMount() {\n    this.__shouldUpdate = true;\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    invokeFunctionsWithContext(this.didMount);\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps() {\n    this.__shouldUpdate = true;\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    invokeFunctionsWithContext(this.didUpdate);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    invokeFunctionsWithContext(this.willUnmount);\n  };\n\n  _proto.__update = function __update() {\n    this.setState(EMPTY_OBJECT);\n  };\n\n  _proto.render = function render() {\n    {\n      Host.measurer && Host.measurer.beforeRender();\n    }\n\n    this.__hookID = 0;\n    this.__reRenders = 0;\n    this.__isScheduled = false;\n\n    var children = this.__render(this.props, this._forwardRef ? this._forwardRef : this.context);\n\n    while (this.__isScheduled) {\n      this.__reRenders++;\n\n      if (this.__reRenders > RE_RENDER_LIMIT) {\n        {\n          throw new Error('Too many re-renders, the number of renders is limited to prevent an infinite loop.');\n        }\n      }\n\n      this.__hookID = 0;\n      this.__isScheduled = false;\n      children = this.__render(this.props, this._forwardRef ? this._forwardRef : this.context);\n    }\n\n    if (this.__shouldUpdate) {\n      this.__children = children;\n      this.__shouldUpdate = false;\n    }\n\n    return this.__children;\n  };\n\n  return ReactiveComponent;\n}(Component);\n\nvar dirtyComponents = [];\n\nfunction getPendingCallbacks(internal) {\n  return internal.__pendingCallbacks;\n}\n\nfunction setPendingCallbacks(internal, callbacks) {\n  return internal.__pendingCallbacks = callbacks;\n}\n\nfunction getPendingStateQueue(internal) {\n  return internal.__pendingStateQueue;\n}\n\nfunction setPendingStateQueue(internal, partialState) {\n  return internal.__pendingStateQueue = partialState;\n}\n\nfunction enqueueCallback(internal, callback) {\n  var callbackQueue = getPendingCallbacks(internal) || setPendingCallbacks(internal, []);\n  callbackQueue.push(callback);\n}\n\nfunction enqueueState(internal, partialState) {\n  var stateQueue = getPendingStateQueue(internal) || setPendingStateQueue(internal, []);\n  stateQueue.push(partialState);\n}\n\nfunction runUpdate(component) {\n  var internal = component[INTERNAL];\n\n  if (!internal) {\n    return;\n  }\n\n  Host.__isUpdating = true;\n  var prevElement = internal.__currentElement;\n  var prevUnmaskedContext = internal._context;\n  var nextUnmaskedContext = internal.__penddingContext || prevUnmaskedContext;\n  internal.__penddingContext = undefined;\n\n  if (getPendingStateQueue(internal) || internal.__isPendingForceUpdate) {\n    internal.__updateComponent(prevElement, prevElement, prevUnmaskedContext, nextUnmaskedContext);\n\n    flushLayout();\n  }\n\n  Host.__isUpdating = false;\n}\n\nfunction mountOrderComparator(c1, c2) {\n  return c2[INTERNAL]._mountID - c1[INTERNAL]._mountID;\n}\n\nfunction performUpdate() {\n  if (Host.__isUpdating) {\n    return schedule(performUpdate);\n  }\n\n  var component;\n  var dirties = dirtyComponents;\n\n  if (dirties.length > 0) {\n    // Before next render, we will flush all the effects\n    flushEffect();\n    dirtyComponents = []; // Since reconciling a component higher in the owner hierarchy usually (not\n    // always -- see shouldComponentUpdate()) will reconcile children, reconcile\n    // them before their children by sorting the array.\n\n    if (dirties.length > 1) {\n      dirties = dirties.filter(function (c) {\n        return !!c[INTERNAL];\n      }).sort(mountOrderComparator);\n    }\n\n    while (component = dirties.pop()) {\n      runUpdate(component);\n    }\n  }\n}\n\nfunction scheduleUpdate(component, shouldAsyncUpdate) {\n  if (dirtyComponents.indexOf(component) < 0) {\n    dirtyComponents.push(component);\n  }\n\n  if (shouldAsyncUpdate) {\n    // If have been scheduled before, do not need schedule again\n    if (dirtyComponents.length > 1) {\n      return;\n    }\n\n    schedule(performUpdate);\n  } else {\n    performUpdate();\n  }\n}\n\nfunction requestUpdate(component, partialState, callback) {\n  var internal = component[INTERNAL];\n\n  if (!internal) {\n    {\n      // Block other render\n      Host.__isUpdating = false;\n      console.error(\"Warning: Can't perform a Rax state update on an unmounted component. This \" + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', component.__isReactiveComponent ? 'a useEffect cleanup function' : 'the componentWillUnmount method');\n    }\n\n    return;\n  }\n\n  if (callback) {\n    enqueueCallback(internal, callback);\n  }\n\n  var hasComponentRendered = internal[RENDERED_COMPONENT]; // setState\n\n  if (partialState) {\n    // Function Component should force update\n    if (component.__isReactiveComponent) {\n      internal.__isPendingForceUpdate = true;\n    }\n\n    enqueueState(internal, partialState); // State pending when request update in componentWillMount and componentWillReceiveProps,\n    // isPendingState default is false value (false or null) and set to true after componentWillReceiveProps,\n    // _renderedComponent is null when componentWillMount exec.\n\n    if (!internal.__isPendingState && hasComponentRendered) {\n      scheduleUpdate(component, true);\n    }\n  } else {\n    // forceUpdate\n    internal.__isPendingForceUpdate = true;\n\n    if (hasComponentRendered) {\n      scheduleUpdate(component);\n    }\n  }\n}\n\nvar Updater = {\n  setState: function setState(component, partialState, callback) {\n    // Flush all effects first before update state\n    if (!Host.__isUpdating) {\n      flushEffect();\n    }\n\n    requestUpdate(component, partialState, callback);\n  },\n  forceUpdate: function forceUpdate(component, callback) {\n    requestUpdate(component, null, callback);\n  }\n};\n\nfunction performInSandbox(fn, instance, callback) {\n  try {\n    return fn();\n  } catch (e) {\n    if (callback) {\n      callback(e);\n    } else {\n      handleError(instance, e);\n    }\n  }\n}\n/**\n * A class component becomes an error boundary if\n * it defines either (or both) of the lifecycle methods static getDerivedStateFromError() or componentDidCatch().\n * Use static getDerivedStateFromError() to render a fallback UI after an error has been thrown.\n * Use componentDidCatch() to log error information.\n * @param {*} instance\n * @param {*} error\n */\n\nfunction handleError(instance, error) {\n  var boundary = getNearestParent(instance, function (parent) {\n    return parent.componentDidCatch || parent.constructor && parent.constructor.getDerivedStateFromError;\n  });\n\n  if (boundary) {\n    scheduleLayout(function () {\n      var boundaryInternal = boundary[INTERNAL]; // Should not attempt to recover an unmounting error boundary\n\n      if (boundaryInternal) {\n        performInSandbox(function () {\n          if (boundary.componentDidCatch) {\n            boundary.componentDidCatch(error);\n          } // Update state to the next render to show the fallback UI.\n\n\n          if (boundary.constructor && boundary.constructor.getDerivedStateFromError) {\n            var state = boundary.constructor.getDerivedStateFromError(error);\n            boundary.setState(state);\n          }\n        }, boundaryInternal.__parentInstance);\n      }\n    });\n  } else {\n    // Do not break when error happens\n    scheduler(function () {\n      throw error;\n    }, 0);\n  }\n}\n\nvar measureLifeCycle;\n\n{\n  measureLifeCycle = function measureLifeCycle(callback, instanceID, type) {\n    Host.measurer && Host.measurer.beforeLifeCycle(instanceID, type);\n    callback();\n    Host.measurer && Host.measurer.afterLifeCycle(instanceID, type);\n  };\n}\n\nfunction scheduleLayoutInSandbox(fn, instance) {\n  scheduleLayout(function () {\n    performInSandbox(fn, instance);\n  });\n}\n\nfunction scheduleLayoutCallbacksInSandbox(callbacks, instance) {\n  if (callbacks) {\n    scheduleLayoutInSandbox(function () {\n      invokeFunctionsWithContext(callbacks, instance);\n    }, instance);\n  }\n}\n/**\n * Composite Component\n */\n\n\nvar CompositeComponent = /*#__PURE__*/function (_BaseComponent) {\n  _inheritsLoose(CompositeComponent, _BaseComponent);\n\n  function CompositeComponent() {\n    return _BaseComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = CompositeComponent.prototype;\n\n  _proto.__mountComponent = function __mountComponent(parent, parentInstance, context, nativeNodeMounter) {\n    var _this = this;\n\n    this.__initComponent(parent, parentInstance, context);\n\n    {\n      this._updateCount = 0;\n      Host.measurer && Host.measurer.beforeMountComponent(this._mountID, this);\n    }\n\n    var currentElement = this.__currentElement;\n    var Component = currentElement.type;\n    var ref = currentElement.ref;\n    var publicProps = currentElement.props;\n    var componentPrototype = Component.prototype; // Context process\n\n    var publicContext = this.__processContext(context); // Initialize the public class\n\n\n    var instance;\n    var renderedElement;\n    performInSandbox(function () {\n      if (componentPrototype && componentPrototype.render) {\n        // Class Component instance\n        instance = new Component(publicProps, publicContext);\n      } else if (isFunction(Component)) {\n        // Functional reactive component with hooks\n        instance = new ReactiveComponent(Component, ref);\n      } else {\n        if (\"development\" !== 'production') {\n          throwError('Invalid component type, expected a class or function component.', Component);\n        }\n      }\n    }, parentInstance);\n\n    if (!instance) {\n      return;\n    } // These should be set up in the constructor, but as a convenience for\n    // simpler class abstractions, we set them up after the fact.\n\n\n    instance.props = publicProps;\n    instance.context = publicContext;\n    instance.refs = {}; // Inject the updater into instance\n\n    instance.updater = Updater;\n    instance[INTERNAL] = this;\n    this[INSTANCE] = instance; // Init state, must be set to an object or null\n\n    var initialState = instance.state;\n\n    if (initialState === undefined) {\n      // TODO clone the state?\n      instance.state = initialState = null;\n    }\n\n    if (instance.componentWillMount) {\n      performInSandbox(function () {\n        if (\"development\" !== 'production') {\n          measureLifeCycle(function () {\n            instance.componentWillMount();\n          }, _this._mountID, 'componentWillMount');\n        }\n      }, instance);\n    }\n\n    Host.owner = this; // Process pending state when call setState in componentWillMount\n\n    instance.state = this.__processPendingState(publicProps, publicContext);\n    var callbacks = this.__pendingCallbacks;\n    this.__pendingCallbacks = null;\n    performInSandbox(function () {\n      if (\"development\" !== 'production') {\n        measureLifeCycle(function () {\n          renderedElement = instance.render();\n        }, _this._mountID, 'render');\n      }\n    }, instance);\n\n    {\n      validateChildKeys(renderedElement, this.__currentElement.type);\n    }\n\n    Host.owner = null;\n    this[RENDERED_COMPONENT] = instantiateComponent(renderedElement);\n\n    this[RENDERED_COMPONENT].__mountComponent(this._parent, instance, this.__processChildContext(context), nativeNodeMounter);\n\n    if (!currentElement.type._forwardRef && ref) {\n      attachRef(currentElement._owner, ref, this);\n    }\n\n    if (instance.componentDidMount) {\n      scheduleLayoutInSandbox(function () {\n        {\n          measureLifeCycle(function () {\n            instance.componentDidMount();\n          }, _this._mountID, 'componentDidMount');\n        }\n      }, instance);\n    } // Trigger setState callback\n\n\n    scheduleLayoutCallbacksInSandbox(callbacks, instance);\n\n    {\n      scheduleLayout(function () {\n        Host.reconciler.mountComponent(_this);\n        Host.measurer && Host.measurer.afterMountComponent(_this._mountID);\n      });\n    }\n\n    return instance;\n  };\n\n  _proto.unmountComponent = function unmountComponent(shouldNotRemoveChild) {\n    var instance = this[INSTANCE]; // Unmounting a composite component maybe not complete mounted\n    // when throw error in component constructor stage\n\n    if (instance && instance.componentWillUnmount) {\n      performInSandbox(function () {\n        instance.componentWillUnmount();\n      }, instance);\n    }\n\n    if (this[RENDERED_COMPONENT] != null) {\n      var currentElement = this.__currentElement;\n      var ref = currentElement.ref;\n\n      if (!currentElement.type._forwardRef && ref) {\n        detachRef(currentElement._owner, ref, this);\n      }\n\n      this[RENDERED_COMPONENT].unmountComponent(shouldNotRemoveChild);\n      this[RENDERED_COMPONENT] = null;\n    } // Reset pending fields\n    // Even if this component is scheduled for another async update,\n    // it would still be ignored because these fields are reset.\n\n\n    this.__pendingStateQueue = null;\n    this.__isPendingForceUpdate = false;\n\n    this.__destoryComponent();\n  }\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`\n   */\n  ;\n\n  _proto.__processContext = function __processContext(context) {\n    var maskedContext = {};\n    var Component = this.__currentElement.type;\n    var contextTypes = Component.contextTypes;\n\n    if (contextTypes) {\n      for (var contextName in contextTypes) {\n        maskedContext[contextName] = context[contextName];\n      }\n    }\n\n    return maskedContext;\n  };\n\n  _proto.__processChildContext = function __processChildContext(currentContext) {\n    var instance = this[INSTANCE]; // The getChildContext method context should be current instance\n\n    var childContext = instance.getChildContext && instance.getChildContext();\n\n    if (childContext) {\n      return assign({}, currentContext, childContext);\n    }\n\n    return currentContext;\n  };\n\n  _proto.__processPendingState = function __processPendingState(props, context) {\n    var instance = this[INSTANCE];\n    var queue = this.__pendingStateQueue;\n\n    if (!queue) {\n      return instance.state;\n    } // Reset pending queue\n\n\n    this.__pendingStateQueue = null;\n    var nextState = assign({}, instance.state);\n\n    for (var i = 0; i < queue.length; i++) {\n      var partial = queue[i];\n      assign(nextState, isFunction(partial) ? partial.call(instance, nextState, props, context) : partial);\n    }\n\n    return nextState;\n  };\n\n  _proto.__updateComponent = function __updateComponent(prevElement, nextElement, prevUnmaskedContext, nextUnmaskedContext) {\n    var _this2 = this;\n\n    var instance = this[INSTANCE]; // Maybe update component that has already been unmounted or failed mount.\n\n    if (!instance) {\n      return;\n    }\n\n    performInSandbox(function () {\n      if (\"development\" !== 'production') {\n        Host.measurer && Host.measurer.beforeUpdateComponent(_this2._mountID, _this2);\n      }\n\n      var willReceive;\n      var nextContext;\n      var nextProps; // Determine if the context has changed or not\n\n      if (_this2._context === nextUnmaskedContext) {\n        nextContext = instance.context;\n      } else {\n        nextContext = _this2.__processContext(nextUnmaskedContext);\n        willReceive = true;\n      } // Distinguish between a props update versus a simple state update\n      // Skip checking prop types again -- we don't read component.props to avoid\n      // warning for DOM component props in this upgrade\n\n\n      nextProps = nextElement.props;\n\n      if (prevElement !== nextElement) {\n        willReceive = true;\n      }\n\n      if (willReceive && instance.componentWillReceiveProps) {\n        // Calling this.setState() within componentWillReceiveProps will not trigger an additional render.\n        _this2.__isPendingState = true;\n        instance.componentWillReceiveProps(nextProps, nextContext);\n        _this2.__isPendingState = false;\n      } // Update refs\n\n\n      if (_this2.__currentElement.type._forwardRef) {\n        instance.__prevForwardRef = prevElement.ref;\n        instance._forwardRef = nextElement.ref;\n      } else {\n        updateRef(prevElement, nextElement, _this2);\n      } // Shoud update default\n\n\n      var shouldUpdate = true;\n      var prevProps = instance.props;\n      var prevState = instance.state; // TODO: could delay execution processPendingState\n\n      var nextState = _this2.__processPendingState(nextProps, nextContext);\n\n      var callbacks = _this2.__pendingCallbacks;\n      _this2.__pendingCallbacks = null; // ShouldComponentUpdate is not called when forceUpdate is used\n\n      if (!_this2.__isPendingForceUpdate) {\n        if (instance.shouldComponentUpdate) {\n          shouldUpdate = instance.shouldComponentUpdate(nextProps, nextState, nextContext);\n        } else if (instance.__isPureComponent) {\n          // Pure Component\n          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(prevState, nextState);\n        }\n      }\n\n      if (shouldUpdate) {\n        _this2.__isPendingForceUpdate = false; // Will set `this.props`, `this.state` and `this.context`.\n\n        var prevContext = instance.context; // Cannot use this.setState() in componentWillUpdate.\n        // If need to update state in response to a prop change, use componentWillReceiveProps instead.\n\n        if (instance.componentWillUpdate) {\n          instance.componentWillUpdate(nextProps, nextState, nextContext);\n        } // Replace with next\n\n\n        _this2.__currentElement = nextElement;\n        _this2._context = nextUnmaskedContext;\n        instance.props = nextProps;\n        instance.state = nextState;\n        instance.context = nextContext;\n\n        _this2.__updateRenderedComponent(nextUnmaskedContext);\n\n        if (instance.componentDidUpdate) {\n          scheduleLayoutInSandbox(function () {\n            instance.componentDidUpdate(prevProps, prevState, prevContext);\n          }, instance);\n        }\n\n        if (\"development\" !== 'production') {\n          // Calc update count.\n          _this2._updateCount++;\n        }\n      } else {\n        // If it's determined that a component should not update, we still want\n        // to set props and state but we shortcut the rest of the update.\n        _this2.__currentElement = nextElement;\n        _this2._context = nextUnmaskedContext;\n        instance.props = nextProps;\n        instance.state = nextState;\n        instance.context = nextContext;\n      }\n\n      scheduleLayoutCallbacksInSandbox(callbacks, instance);\n\n      if (\"development\" !== 'production') {\n        scheduleLayout(function () {\n          Host.measurer && Host.measurer.afterUpdateComponent(_this2._mountID);\n          Host.reconciler.receiveComponent(_this2);\n        });\n      }\n    }, instance);\n  }\n  /**\n   * Call the component's `render` method and update the DOM accordingly.\n   */\n  ;\n\n  _proto.__updateRenderedComponent = function __updateRenderedComponent(context) {\n    var prevRenderedComponent = this[RENDERED_COMPONENT];\n    var prevRenderedElement = prevRenderedComponent.__currentElement;\n    var instance = this[INSTANCE];\n    var nextRenderedElement;\n    Host.owner = this;\n\n    {\n      measureLifeCycle(function () {\n        nextRenderedElement = instance.render();\n      }, this._mountID, 'render');\n    }\n\n    Host.owner = null;\n\n    if (shouldUpdateComponent(prevRenderedElement, nextRenderedElement)) {\n      var prevRenderedUnmaskedContext = prevRenderedComponent._context;\n\n      var nextRenderedUnmaskedContext = this.__processChildContext(context); // If getChildContext existed and invoked when component updated that will make\n      // prevRenderedUnmaskedContext not equal nextRenderedUnmaskedContext under the tree\n\n\n      if (prevRenderedElement !== nextRenderedElement || prevRenderedUnmaskedContext !== nextRenderedUnmaskedContext) {\n        // If element type is illegal catch the error\n        prevRenderedComponent.__updateComponent(prevRenderedElement, nextRenderedElement, prevRenderedUnmaskedContext, nextRenderedUnmaskedContext);\n      }\n\n      {\n        Host.measurer && Host.measurer.recordOperation({\n          instanceID: this._mountID,\n          type: 'update component',\n          payload: {}\n        });\n      }\n    } else {\n      var lastNativeNode = null;\n\n      var prevNativeNode = prevRenderedComponent.__getNativeNode(); // Only prevNativeNode is empty fragment should find the prevSlibingNativeNode\n      // And current root component is fragment, but not need find the prevSlibingNativeNode when init mounting\n\n\n      if (isArray(prevNativeNode) && prevNativeNode.length === 0 && instance.__rootID == null) {\n        lastNativeNode = getPrevSiblingNativeNode(prevRenderedComponent);\n      }\n\n      prevRenderedComponent.unmountComponent(true);\n      this[RENDERED_COMPONENT] = instantiateComponent(nextRenderedElement);\n\n      this[RENDERED_COMPONENT].__mountComponent(this._parent, instance, this.__processChildContext(context), function (newNativeNode, parent) {\n        var driver = Host.driver;\n        prevNativeNode = toArray(prevNativeNode);\n        newNativeNode = toArray(newNativeNode); // If the new length large then prev\n\n        for (var i = 0; i < newNativeNode.length; i++) {\n          var nativeNode = newNativeNode[i];\n\n          if (prevNativeNode[i]) {\n            driver.replaceChild(nativeNode, prevNativeNode[i]);\n          } else if (lastNativeNode) {\n            driver.insertAfter(nativeNode, lastNativeNode);\n          } else {\n            driver.appendChild(nativeNode, parent);\n          }\n\n          lastNativeNode = nativeNode;\n        } // If the new length less then prev\n\n\n        for (var _i = newNativeNode.length; _i < prevNativeNode.length; _i++) {\n          driver.removeChild(prevNativeNode[_i]);\n        }\n      });\n    }\n  };\n\n  _proto.__getNativeNode = function __getNativeNode() {\n    var renderedComponent = this[RENDERED_COMPONENT];\n\n    if (renderedComponent) {\n      return renderedComponent.__getNativeNode();\n    }\n  };\n\n  _proto.__getPublicInstance = function __getPublicInstance() {\n    var instance = this[INSTANCE]; // The functional components cannot be given refs\n\n    if (instance.__isReactiveComponent) return null;\n    return instance;\n  };\n\n  return CompositeComponent;\n}(BaseComponent);\n\n/**\n * Fragment Component\n */\n\nvar FragmentComponent = /*#__PURE__*/function (_NativeComponent) {\n  _inheritsLoose(FragmentComponent, _NativeComponent);\n\n  function FragmentComponent() {\n    return _NativeComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = FragmentComponent.prototype;\n\n  _proto.__mountComponent = function __mountComponent(parent, parentInstance, context, nativeNodeMounter) {\n    this.__initComponent(parent, parentInstance, context);\n\n    var instance = this[INSTANCE] = {};\n    instance[INTERNAL] = this;\n    var fragment = [];\n\n    this.__mountChildrenImpl(this._parent, this.__currentElement, context, function (nativeNode) {\n      nativeNode = toArray(nativeNode);\n\n      for (var i = 0; i < nativeNode.length; i++) {\n        fragment.push(nativeNode[i]);\n      }\n    });\n\n    if (nativeNodeMounter) {\n      nativeNodeMounter(fragment, parent);\n    } else {\n      for (var i = 0; i < fragment.length; i++) {\n        Host.driver.appendChild(fragment[i], parent);\n      }\n    }\n\n    {\n      this.__currentElement.type = FragmentComponent;\n      Host.reconciler.mountComponent(this);\n    }\n\n    return instance;\n  };\n\n  _proto.unmountComponent = function unmountComponent(shouldNotRemoveChild) {\n    if (!shouldNotRemoveChild) {\n      var nativeNode = this.__getNativeNode();\n\n      for (var i = 0, l = nativeNode.length; i < l; i++) {\n        Host.driver.removeChild(nativeNode[i]);\n      }\n    } // Do not need remove child when their parent is removed\n\n\n    this.__unmountChildren(true);\n\n    this.__destoryComponent();\n  };\n\n  _proto.__updateComponent = function __updateComponent(prevElement, nextElement, prevContext, nextContext) {\n    // Replace current element\n    this.__currentElement = nextElement;\n\n    this.__updateChildren(this.__currentElement, nextContext);\n\n    {\n      this.__currentElement.type = FragmentComponent;\n      Host.reconciler.receiveComponent(this);\n    }\n  };\n\n  _proto.__getNativeNode = function __getNativeNode() {\n    var renderedChildren = this.__renderedChildren || {};\n    return [].concat.apply([], Object.keys(renderedChildren).map(function (key) {\n      return renderedChildren[key].__getNativeNode();\n    }));\n  };\n\n  return FragmentComponent;\n}(NativeComponent);\n\n{\n  FragmentComponent.displayName = 'Fragment';\n}\n\nvar Reconciler = {\n  // Stubs - DevTools expects to find these methods and replace them\n  // with wrappers in order to observe components being mounted, updated and\n  // unmounted\n  mountComponent: function mountComponent() {},\n  receiveComponent: function receiveComponent() {},\n  unmountComponent: function unmountComponent() {},\n  // Stub - DevTools expects to find this method and replace it\n  // with a wrapper in order to observe new root components being added\n  renderNewRootComponent: function renderNewRootComponent() {}\n};\n\nfunction inject(_ref) {\n  var driver = _ref.driver,\n      measurer = _ref.measurer;\n  // Inject component class\n  Host.__Empty = EmptyComponent;\n  Host.__Native = NativeComponent;\n  Host.__Text = TextComponent;\n  Host.__Fragment = FragmentComponent;\n  Host.__Composite = CompositeComponent; // Inject render driver\n\n  if (!(Host.driver = driver || Host.driver)) {\n    {\n      throwError('Rax driver not found.');\n    }\n  }\n\n  {\n    // Inject devtool renderer hook\n    Host.reconciler = Reconciler; // Inject performance measurer\n\n    Host.measurer = measurer;\n  }\n}\n\nfunction render(element, container, options, callback) {\n  // Compatible with `render(element, container, callback)`\n  if (isFunction(options)) {\n    callback = options;\n    options = null;\n  }\n\n  options = options || EMPTY_OBJECT; // Init inject\n\n  inject(options);\n  var rootComponent = Instance.mount(element, container, options);\n\n  var componentInstance = rootComponent.__getPublicInstance();\n\n  if (callback) {\n    callback.call(componentInstance);\n  }\n\n  return componentInstance;\n}\n\nvar version = \"1.2.2\";\n\nvar DevtoolsHook = {\n  ComponentTree: {\n    getClosestInstanceFromNode: function getClosestInstanceFromNode(node) {\n      return Instance.get(node);\n    },\n    getNodeFromInstance: function getNodeFromInstance(inst) {\n      // inst is an internal instance (but could be a composite)\n      while (inst[RENDERED_COMPONENT]) {\n        inst = inst[RENDERED_COMPONENT];\n      }\n\n      if (inst) {\n        return inst._nativeNode;\n      } else {\n        return null;\n      }\n    }\n  },\n  Mount: {\n    get _instancesByReactRootID() {\n      var rootComponents = {}; // Ignore display top-level root component\n\n      for (var rootID in Host.rootComponents) {\n        rootComponents[rootID] = Host.rootComponents[rootID][RENDERED_COMPONENT];\n      }\n\n      return rootComponents;\n    },\n\n    _renderNewRootComponent: Reconciler.renderNewRootComponent\n  },\n  Reconciler: Reconciler,\n  // monitor the info of all components\n  monitor: null\n};\n\nvar shared = {\n  Host: Host,\n  Instance: Instance,\n  Element: Element,\n  flattenChildren: flattenChildren\n};\n\n{\n  /* global __RAX_DEVTOOLS_GLOBAL_HOOK__ */\n  if (typeof __RAX_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __RAX_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {\n    __RAX_DEVTOOLS_GLOBAL_HOOK__.inject(DevtoolsHook);\n  }\n\n  if (typeof window !== 'undefined') {\n    if (window.__RAX_INITIALISED__) {\n      console.error('Warning: more than one instance of Rax has been initialised, this could lead to unexpected behaviour.');\n    }\n\n    window.__RAX_INITIALISED__ = true;\n  }\n}\n\nexports.Component = Component;\nexports.Fragment = Fragment;\nexports.PureComponent = PureComponent;\nexports.createContext = createContext;\nexports.createElement = createElement;\nexports.createRef = createRef;\nexports.forwardRef = forwardRef;\nexports.memo = memo;\nexports.render = render;\nexports.shared = shared;\nexports.useCallback = useCallback;\nexports.useContext = useContext;\nexports.useEffect = useEffect;\nexports.useImperativeHandle = useImperativeHandle;\nexports.useLayoutEffect = useLayoutEffect;\nexports.useMemo = useMemo;\nexports.useReducer = useReducer;\nexports.useRef = useRef;\nexports.useState = useState;\nexports.version = version;\n"]}