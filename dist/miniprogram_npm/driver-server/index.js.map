{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n *  Server driver\n **/\nvar ID = 'id';\nvar STYLE = 'style';\nvar CHILDREN = 'children';\nvar DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';\nvar EVENT_PREFIX_REGEXP = /^on[A-Z]/;\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\nvar Driver = {\n  // Internal state\n  nodeMaps: {},\n  getElementById: function getElementById(id) {\n    return this.nodeMaps[id];\n  },\n  createBody: function createBody() {\n    return {\n      nodeType: ELEMENT_NODE,\n      tagName: 'BODY',\n      attributes: {},\n      style: {},\n      eventListeners: {},\n      childNodes: [],\n      parentNode: null\n    };\n  },\n  createComment: function createComment(content) {\n    return {\n      nodeType: COMMENT_NODE,\n      data: content,\n      parentNode: null\n    };\n  },\n  createEmpty: function createEmpty() {\n    return this.createComment(' empty ');\n  },\n  createText: function createText(text) {\n    return {\n      nodeType: TEXT_NODE,\n      data: text,\n      parentNode: null\n    };\n  },\n  updateText: function updateText(node, text) {\n    node.data = text;\n  },\n  createElement: function createElement(type, props) {\n    var node = {\n      nodeType: ELEMENT_NODE,\n      tagName: type.toUpperCase(),\n      attributes: {},\n      style: props.style || {},\n      eventListeners: {},\n      childNodes: [],\n      parentNode: null\n    };\n    this.setNativeProps(node, props, true);\n    return node;\n  },\n  appendChild: function appendChild(node, parent) {\n    parent.childNodes.push(node);\n    node.parentNode = parent;\n  },\n  removeChild: function removeChild(node, parent) {\n    parent = parent || node.parentNode;\n    var id = node.attributes && node.attributes[ID];\n\n    if (id != null) {\n      this.nodeMaps[id] = null;\n    }\n\n    if (node.parentNode) {\n      var idx = node.parentNode.childNodes.indexOf(node);\n      node.parentNode.childNodes.splice(idx, 1);\n      node.parentNode = null;\n    }\n  },\n  replaceChild: function replaceChild(newChild, oldChild, parent) {\n    parent = parent || oldChild.parentNode;\n    var previousSibling = this.previousSibling(oldChild);\n    var nextSibling = this.nextSibling(oldChild);\n    this.removeChild(oldChild, parent);\n\n    if (previousSibling) {\n      this.insertAfter(newChild, previousSibling, parent);\n    } else if (nextSibling) {\n      this.insertBefore(newChild, nextSibling, parent);\n    } else {\n      this.appendChild(newChild, parent);\n    }\n  },\n  insertAfter: function insertAfter(node, after, parent) {\n    parent = parent || after.parentNode;\n    var nodeIdx = parent.childNodes.indexOf(node);\n\n    if (nodeIdx !== -1) {\n      parent.childNodes.splice(nodeIdx, 1);\n    }\n\n    var idx = parent.childNodes.indexOf(after);\n\n    if (idx === parent.childNodes.length - 1) {\n      parent.childNodes.push(node);\n    } else {\n      parent.childNodes.splice(idx + 1, 0, node);\n    }\n\n    node.parentNode = parent;\n  },\n  insertBefore: function insertBefore(node, before, parent) {\n    parent = parent || before.parentNode;\n    var nodeIdx = parent.childNodes.indexOf(node);\n\n    if (nodeIdx !== -1) {\n      parent.childNodes.splice(nodeIdx, 1);\n    }\n\n    var idx = parent.childNodes.indexOf(before);\n    parent.childNodes.splice(idx, 0, node);\n    node.parentNode = parent;\n  },\n  nextSibling: function nextSibling(node) {\n    var parentNode = node.parentNode;\n\n    if (parentNode) {\n      var idx = parentNode.childNodes.indexOf(node);\n      return parentNode.childNodes[idx + 1];\n    }\n  },\n  previousSibling: function previousSibling(node) {\n    var parentNode = node.parentNode;\n\n    if (parentNode) {\n      var idx = parentNode.childNodes.indexOf(node);\n      return parentNode.childNodes[idx - 1];\n    }\n  },\n  addEventListener: function addEventListener(node, eventName, eventHandler) {\n    node.eventListeners[eventName] = eventHandler;\n  },\n  removeEventListener: function removeEventListener(node, eventName, eventHandler) {\n    delete node.eventListeners[eventName];\n  },\n  removeAttribute: function removeAttribute(node, propKey, propValue) {\n    if (propKey === 'className') {\n      propKey = 'class';\n    }\n\n    if (propKey == ID) {\n      this.nodeMaps[propValue] = null;\n    }\n\n    if (node.tagName === 'INPUT' && (propKey == 'checked' && (node.attributes.type === 'checkbox' || node.attributes.type === 'radio') || propKey == 'value')) {\n      node.attributes[propKey] = null;\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n      node.__html = null;\n    } else {\n      node.attributes[propKey] = null;\n    }\n  },\n  setAttribute: function setAttribute(node, propKey, propValue) {\n    if (propKey === 'className') {\n      propKey = 'class';\n    }\n\n    if (propKey == ID) {\n      this.nodeMaps[propValue] = node;\n    }\n\n    if (node.tagName === 'INPUT' && (propKey == 'checked' && (node.attributes.type === 'checkbox' || node.attributes.type === 'radio') || propKey == 'value')) {\n      node.attributes[propKey] = propValue;\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n      node.__html = propValue.__html;\n    } else if (propValue != null) {\n      node.attributes[propKey] = propValue;\n    }\n  },\n  setStyle: function setStyle(node, style) {\n    for (var key in style) {\n      node.style[key] = style[key];\n    }\n  },\n  setNativeProps: function setNativeProps(node, props, shouldIgnoreStyleProp) {\n    for (var prop in props) {\n      var value = props[prop];\n\n      if (prop === CHILDREN) {\n        continue;\n      }\n\n      if (value != null) {\n        if (prop === STYLE) {\n          if (shouldIgnoreStyleProp) {\n            continue;\n          }\n\n          this.setStyle(node, value);\n        } else if (EVENT_PREFIX_REGEXP.test(prop)) {\n          var eventName = prop.slice(2).toLowerCase();\n          this.addEventListener(node, eventName, value);\n        } else {\n          this.setAttribute(node, prop, value);\n        }\n      }\n    }\n  }\n};\nvar _default = Driver;\nexports.default = _default;"]}