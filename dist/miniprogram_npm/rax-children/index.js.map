{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _rax = require(\"rax\");\n\nvar flattenChildren = _rax.shared.flattenChildren;\n\nfunction convertChildrenToArray(children) {\n  // flatten children\n  children = flattenChildren(children, []);\n  return Array.isArray(children) ? children : [].concat(children);\n}\n\nvar Children = {\n  map: function map(children, fn, ctx) {\n    if (children == null) return null;\n    children = convertChildrenToArray(children);\n    return children.map(function (child, index) {\n      return fn.call(ctx, child, index);\n    });\n  },\n  forEach: function forEach(children, fn, ctx) {\n    if (children == null) return null;\n    children = convertChildrenToArray(children);\n    children.forEach(function (child, index) {\n      return fn.call(ctx, child, index);\n    });\n  },\n  count: function count(children) {\n    if (children == null) return 0;\n    return convertChildrenToArray(children).length;\n  },\n  only: function only(children) {\n    // `only` receive rax element child\n    // null value is not acceptable\n    children = Children.toArray(children);\n    if (children.length !== 1) throw new Error('Children.only: expected to receive a single element child.');\n    return children[0];\n  },\n  toArray: function toArray(children) {\n    if (children == null) return []; // `toArray` filter null value\n\n    return convertChildrenToArray(children).filter(function (child) {\n      return child !== null;\n    });\n  }\n};\nvar _default = Children;\nexports.default = _default;"]}